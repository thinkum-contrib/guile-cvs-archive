#!/usr/bin/perl -w
#
#
#

# valid tags:
# 	S - synopsis of a R5RS function
#   E - synopsis of QScheme specific function
#   F - synopsis of a syntaxic Form
#   I - synopsis of an internal construct
# 	D - description
#   X - example

$type = "";						#
$synopsis = "";
$descr = "";
$example="";

$width = 68;

sub flush_def
{
	if ($synopsis eq "" || $type eq "") { return; }

	print FMT $synopsis . 
		(" " x ($width - (length($synopsis) + length($type) + 4))).
			"[$type]\n";
	if ($descr ne "") {
		print FMT "  $descr\n\n";
	}
	if ($example ne "") {
		print FMT "  Example:\n    $example\n\n";
	}
#	print FMT ".\n\n";
	$type = "";
	$synopsis = "";
	$descr = "";
	$example="";
}

sub handle_tag
{
	my($file, $lno, $tag, $value) = @_;

	if ($tag eq "S") {			# standard definition
		flush_def();
		$type = "R5RS";			$synopsis = $value;
		return;
	}
	if ($tag eq "E") {			# extensions
		flush_def();
		$type = "QScheme";		$synopsis = $value;
		return;
	}
	if ($tag eq "F") {			# syntaxic Form
		flush_def();
		$type = "SYNTAX";		$synopsis = $value;
		return;
	}
	if ($tag eq "I") {			# internal construct
		flush_def();
		$type = "";				$synopsis = "";
		return;
	}
	if ($tag eq "D") {	$descr = $value; 		return; }
	if ($tag eq "X") {	$example=$value;		return;	}
	print STDERR "OOPS: $file($lno): don't know what to do with tag=$tag\nvalue=$value\n";
}

# MAIN

open(FMT,"|fmt -w $width") || die "cannot fork fmt";

while(@ARGV) {
	$file = shift(@ARGV);
	if (open(F, $file)) {
		$lno = 0;
		while(<F>) {
			$lno++;
			chop;
			if (m|^/\*([A-Za-z])\*\s|) {
				$tag = $1;
				$str = $';
				if ($str =~ m|(.*?)\s*\*\/|) {
					$str = $1;
				} else {
					while(<F>) {
						if (m|^(.*?)\s*\*\/|) {
							$line = $1;
							$line =~ s|^\s*\*\s*||;
							$str = $str . " ". $line;
							last;
						}
						chop;
						$str .= $_;
					}
				}
				$str =~ s|\s+| |g;
#				print "TAG=$tag STR=$str\n";
				handle_tag($file, $lno, $tag, $str);
			}
		}
	}
}
flush_def();
close(FMT);
