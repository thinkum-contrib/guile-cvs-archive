-*- indented-text -*-
---
--- What to do now
---

* Is it a good idea to store something after an opcode in the code
  array ? When I expand code (inline), how do I deal with such
  instructions ?. I better have to store all on stack.

* change the strings. Strings must use SCM_STRBUF.
  SCM_STR_VALUE(x)	 SCM_CAR(x)
  SCM_STR_LEN(x)	 ((SCM_STRBUF*)SCM_CDR(x))->len

* Fix compilation of QScheme on Solaris.

* asm3: generation of asm icode should be done in scheme.

* Generic setter:
  (define obj (make-vector 10)) (set! obj 0 10)
  (define obj (make-hash)) (set! obj 'main '())

* Change the argument stacking system.

  (+ x y) => cont y x +

  (+ x y) => cont + x y


* change the ssort and qsort to handle optionnal compare argument.

* have a hook when trying to exec unbound objects.  for example (ls)
  should cause execution of an execption mechanism that can do
  whatever usefull.

* Debugging: when error occurs in vm:
  - use ip[0] to search which functions uses a code like this. and
	print it.

? asm.c and vm2.c: ensure that the max number of elements pushed in
  the stack without resync() is 30. Enforce this with a new opcode
  l_sync in the vm and change asm to generate sync when more than 30
  arguments are pushed. All this bronx is because when we have a gc in
  multi-thread context we must aproximate what depth of vm stack has
  to be scanned for non-active threads.

V change scm_vmd macro to scm_vmd(), because you will better fill it's
  a value that involve some work.

V list.c: remove scm_sp setting. This code should be part of scm_vm()
  code. (calls)

* threads and scm_sp elimination:
  V heap.c: scm_gc_mark_stacks:
	must be adapted to mark stacks on all active vm

  V object.c: dirty hack around scm_sp. try to fix.

V move scm_errjmp to SCM_VM

V Error printing:
  define err as a macro and use __FUNCTION__ or __PRETTY_FUNCTION__
  to obtain the name of the failing function.

* Variable.c:

  * func to access variable at a certain offset.
  * func to define custom variable type.
  * change getter and setter function to accept addr as argument
  
  	SOBJ (*get) (SOBJ var, void *ptr)
	void (*set) (SOBJ var, void *ptr, SOBJ value)

    So that we can get/set function to modify arbitrary address.
       
    ??? if ptr == NULL, use SCM_VAR_ADDR


* add a size to AUX objects. Then we should be able to convert any aux
  object to string-buffer back and forth and use string-pack and
  unpack to handle structure contents.

* gdk-gc-get-xxx where xxx is one of : foreground, background, font,
  function, fill, tile, stipple, clipmask, subwindow, ts_origin,
  clip_origin, exposures, line_attrib, dashes

* mkwhatis should also be able to scan scheme files.

  ;S (whatis STRING) => #undefined
  ;D Scan the whatis.qs file and display all matching inf...


* GNOME support for sgtk

* OBJECT: object-send should be included in the vm engine.

* change the define syntax:
  (define (func x y #!optional o p #!rest z) )

? change (open-output-string string)

* Add syntax:
  (when <test> [ <expr> ]+ )
  (unless <test> [ <expr> ]+ )
  (until <test> [ <expr> ]+)
  (dotimes (<var> <count> [ <result> ]) [ <expr> ]+)

* Think of new optimisation strategy:

  - split optimization in two phases:

    - the first occurs right AFTER the compilation and is targeted to
      common optimisation such as tail optimisation, dead code
      elimination, loop reordering, lambda lifting.

	- the 2nd occurs BEFORE assembling and depends on what assembly
      target we have. This opt should speedup code execution.

	  In case of VM target, the goal is to reduce the number of
	  instructions the code has to execute, because each opc costs an
	  indirect jump.

	  In case of C target, we should try for example to avoid
	  successive push/pop when a call to a cfunction occur.

	QUESTION: is it worse to try a pre-optimisation (before code
	compilation) ? Should lambda lifting occur there ?

* Optimizer:
  - dead code elimination.

* Modules

  ?* implement recursive search for exported symbols in
    module_find_symbol().

  * move private definition of the scheme (*i+* *f+*) in the global
    module and don't export them (more clean)

* primitive missing:
  4.2.3 named-let
  4.2.5 delay
  4.3   r5rs macros
  5.3   define cannot redefine begin, if, etc...

  6.4	procedure? force/promise
		call/cc values call-with-values dynamic-wind 
  6.6	call-with-input-file, call-with-output-file
  6.6.4 transcript-on transcript-off

----------------------------------------------------------------

* implement fast string:
  fast string are 2linked list of small string (~32). Insertion,
  deletion etc. will be faster than C like string.

* error unbound variable when searching for local variable

* Optimization :
  * constant propagation (peephole optimization)

* changes logic of overflow check

