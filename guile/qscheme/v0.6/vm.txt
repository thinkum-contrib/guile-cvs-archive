-*- indented-text -*-

VM3 engine
----------

VM registers:
	SOBJ			ENV
	SCM_ContFrame*		CONT
	SOBJ*			IP
	SOBJ*			SP
	SOBJ*			AP		? don't know if we need

ENV		points to the environment chain.
CONT	points to current partial continuation
IP		points to next location of code being executed
SP		points the top of the stack
AP		points to the first argument of on the current stack. If we
		always push a continuation, it will always point to the first
		cell after the continuation space.

Stack layout during common operations
-------------------------------------

expr:	(let (...) ...)

   
partial continuation

	{ next-cont, env, ip }

#define SPUSH(x)	{ *sp = TOS; sp++; TOS=(x); }
#define SPOP(x)		{ (x) = TOS; sp--; TOS=*sp; }

#define PUSH_CONT()
{
  SCM_ContFrame *nc;
  vm->reg.sp = sp;
  supdate();
  nc = (SCM_ContFrame *)sp;
  nc->cont = cont;
  nc->env = nc->ip = NULL;
  cont = nc;
  sp += sizeof(SCM_ContFrame);
}  

#define POP_CONT()
{
  cont = cont->next;
}




















VM2 Engine
----------

Machine registers:

	ENV
	CONT
	IP
	SP

Partial continuation:

PartialContinuation {
	PartialContinuation *cont;
	SOBJ *env;
	SOBJ *cont;
	SOBJ *ip;
}

A partial continuation contains all information needed to resume
computation.

A partial continuation is pushed on the stack when a %mark instruction
is encountered. 

When the next %callv instruction is encountered, the ip of the current
continuation is updated to point to the instruction just after the
%callv.


Structure of proc nodes:

    closure = [ envFrame | code ]
	envFrame = [ next | nslots | bind#0 | bind#1 ... ]
	code = [ envlist | size | nargs | optargs | code... ]
             
