-*- tab-width:4; -*-

STRUCTURES

Implementation of structure reposes on 3 new data types:

* STRUCTURE DEFINITION (SOBJ_T_STRUCT_DEF)

Contains the description of the content of the structure. Fields are
the following:

	* name: ptr to atom	: used for debugging and printing.
	* size: int        	: the normal structure size:
	* nfields: int		: the number of fields in the structure
	* field[]: 			: the list of field description.

Field description item has following entries:

	* name:	ptr to atom	: the name of the field
	* var:  ptr to var	: the type of field.
	* rept: int			: number of repetition of this field:
	* offset: int		: offset of this field in the data

Using a VARIABLE as type is simpler, because we can use the VARIABLE
ability to fetch and store value directly.

* DATA BLOCK	 (SOBJ_T_DBLOCK)

Contains the real data of the structure. Needs 2 fields to store block
informations:

	* a pointer to the data block
	* a size
	* a bit to indicate if the structure is static or has been allocated.

The size and the FLAG bit are packed into one LONG. The FLAG bit is
the MSB of the long, the size is the rest. This limits size of a block
to (2^31)-1 bytes. Should be large enough.

If the FLAG bit is set, then the structure is allocated and scm_free
has to be call during the sweep phase.

* STRUCTURE INSTANCE  (SOBJ_T_STRUCT_OBJECT)

Binds to a data block and a structure definition.

PRIMITIVES:

	(make-dblock SIZE) => DBLOCK
	Make a new data block of SIZE byte
	
	(dblock-copy OLD) => NEW
	Make a fresh copy of a data block.

	(dblock-fill! DBLOCK CHAR) => #undef

	(dblock-resize! DBLOCK NEWSIZE) => #undef

	(dblock-pack TEMPLATE ARGS) => DBLOCK
	Make a new data block by filling a block with ARGS according to
	TEMPLATE.

	(dblock-unpack FMT DBLOCK) => LIST
	Extract values from DBLOCK as described by the TEMPLATE string.

	(struct-definition NAME FIELD) => STRUCT_DEF
	Create a new structure definition.

	(struct-definition-copy OLD) => NEW
	
	(struct-definition-add-field! SDEF FIELD)		=> #undef
	(struct-definition-remove-field! SDEF FIELD)	=> #undef

	(make-struct SDEF DBLOCK)
		
	(make-variable-type NAME GETTER SETTER)			=> VAR

	EX: (make-variable-type 'status
							(lambda ()  (string-ref status-string 0))
							(lambda (x) (string-set status-string 0 x)))


MOTIVATION

Using a 3 part scheme allow:

	* To share data between different structure instances

	* To have different structure definitions to access the same data
	  (union)

	* We need a way to store and handle unformated information
      block.

	* Simple adaptation of string-pack and string-unpack give access
      to data in a more simpler way.

Other advantages:

	* Usage of VARIABLE as field type enable us to mix native data,
      scheme data and user defined data type.

	* A structure instance costs 2 cells and a memory block. This is
	  not too much I think.

WHAT IS MISSING

I don't have primitives to define and use user-defined variable type.

Some code rework on variable.c is needed.


