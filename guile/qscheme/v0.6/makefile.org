#
# Makefile for my small (but hopefully fast) scheme
#

# Usefull targets:
#
#  qscheme	build the qscheme interpreter (default)
#  libs.so  build the qscheme library
#  doc		generate the documentation

# The name of the interpreter executable
QS=qscheme

# The name of the library
QS_LIB=libqs.so

QS_LDFLAGS=-rdynamic

# Debug symbols
#
# DEBUG					general debug
# DEBUG_GC_PHASES		debug for gc
# DEBUG_COMPILE			debug for compiler
# DEBUG_EXECUTE			debug for executor
# DEBUG_REPL			debug for repl phases
#
DEBUG=-DDEBUG -DDEBUG_GC_PHASES -DDEBUG_COMPILE -DDEBUG_EXECUTE -DDEBUG_REPL
DEBUG=-DDEBUG_EXECUTE
DEBUG=

# Multi-precision library

GMP=gmp-2.0.2
GMP_LIB=$(GMP)/libgmp.a

# Foreign function call
AVCALL=ffcall-1.5/avcall
AVCALL_LIB=$(AVCALL)/libavcall.a

# Perl regex lib
PCRE=pcre-3.1
PCRE_DIR=$(PCRE)
PCRE_LIB=$(PCRE)/.libs/libpcre.a

# MPP dir
MPP=$(HOME)/html/mpp
MPP_RAW=$(MPP)/raw
MPP_QS_FILES=$(MPP_RAW)/qscheme/files

# common definitions
CC=gcc
CFLAGS=-Wall -Winline -fomit-frame-pointer -finline-functions -O2 -g $(DEBUG) -I$(GMP) -I$(AVCALL)
CFLAGS=-Wall -O -g -DENGINE_TRACE $(DEBUG) -I$(GMP) -I$(AVCALL)

ifeq ($(shell uname), Linux)
# for Linux
CFLAGS=-Wall -O -g $(DEBUG) -I$(GMP) -I$(AVCALL)
else
# for Solaris
CFLAGS=-Wall -O -fPIC -g $(DEBUG) -I$(GMP) -I$(AVCALL)
endif
# K6 Specific optimization
# CFLAGS=-Wall -Winline -fomit-frame-pointer -finline-functions -O2 -mcpu=k6 -g $(DEBUG) -I$(GMP) -I$(AVCALL)

# Uncomment this if you have egcc and want the best performances
#CC=egcc
#CFLAGS=-Wall -Winline -fomit-frame-pointer -finline-functions -fstrict-aliasing -O2 -g $(DEBUG) -I$(GMP) -I$(AVCALL)

#
# This filelist was generated by:
# perl -ne '@f=split(/\s+/,$_);for$f(@f){print "$f\n";}' .depend \
# |grep -v :|sort|uniq|fgrep .c
#
SRC=array.c asm.c atom.c boolean.c catch.c chr.c code.c cont.c \
	dyn.c  env.c hash.c heap.c list.c lsym.c macro.c misc.c module.c \
	number.c pointer.c port.c proc.c s.c str.c sym.c variable.c vm2.c \
	process.c format.c

INC=asm.h c-extensions.h config.h cont.h heap.h port.h proc.h s.h \
  sproto.h stack.h vm2.h

# This is specific to gnu make
VERSION = $(shell cat VERSION)
PREV_VERSION = $(shell cat PREV_VERSION)
CDIR    = $(shell pwd)

OBJ = $(SRC:%.c=%.o)

# Extension library
EXTLIB_SRC=regex.c  process.c  file.c  object.c object.h \
	struct.c struct.h socket.c
EXTLIB_ALL=regex.so process.so file.so object.so \
	struct.so socket.so

# Macro files
VM_FILES = prim2.i number.i prim2.x number.x

# Script files
SCRIPT_FILES = mkoptable

# Documentation files
DOC_DIR = doc
DOC_FILES = CHANGES HEADER INSTALL LICENSE README TODO VERSION \
	$(DOC_DIR)/*.tex $(DOC_DIR)/*.dvi $(DOC_DIR)/*ps $(DOC_DIR)/html

# Scheme files
SCM_FILES = s.scm macro.scm repl.scm loop.scm wloop.scm fib.scm

# Other files
MISC_FILES= .depend .gdbinit makefile smain.c tstlib.c tstlib.defs mkwhatis

# Files to compile sgtk
#
SGTK_FILES=$(shell cat sgtk/FILES)

# Files to include in distributions
DIST_FILES=$(SRC) $(INC) $(VM_FILES) $(MISC_FILES) $(EXTLIB_SRC) \
  $(SCRIPT_FILES) $(DOC_FILES) $(SCM_FILES) $(SGTK_FILES)

ARCH_DIR=$(CDIR)/arch
BUILD_DIR=/tmp

.PHONY: all doc clean tgz dist pkg unpkg depend config sgtk

all: $(QS) extlib tstlib.so whatis
	@echo "QScheme is ready. Don't forget to set QS_LIB before you run it."
	@echo "Just type in the following line: "
	@echo 
	@echo "  QS_LIB="`pwd`" ; export QS_LIB"
	@echo
	@echo "Have fun..."
	@echo

$(QS): smain.o $(OBJ) $(QS_LIB) config.h sproto.h $(AVCALL_LIB) 
	$(CC) $(QS_LDFLAGS) -o $@ smain.o $(OBJ) \
    $(GMP_LIB) $(AVCALL_LIB) -lm -ldl # -lefence

extlib: $(EXTLIB_ALL)

$(QS_LIB): $(OBJ) $(AVCALL_LIB) $(GMP_LIB)
	$(CC) -shared -o $@ $(OBJ)

doc:
	cd doc ; $(MAKE) doc

sproto.h:
	cfunctions -g sproto $(SRC)

sprof:
	$(CC) $(CFLAGS) -pg -o sprof $(SRC) $(GMP_LIB) -lm

st: $(OBJ) config.h
	$(CC) $(CFLAGS) -DENGINE_TRACE -c vm.c
	$(CC) -o $@ $(OBJ) $(GMP_LIB) -lm -ldl

tst2: tst2.o
	$(CC) -o $@ tst2.o

etags:
	etags $(SRC) $(INC)

regex.so: regex.c $(PCRE_LIB) $(QS_LIB)
	$(CC) -o $@ -shared -fPIC $(CFLAGS) -I$(PCRE) regex.c $(PCRE_LIB)

object.so: object.c $(PCRE_LIB) $(QS_LIB)
	$(CC) -o $@ -shared -fPIC $(CFLAGS) object.c

process.so: process.c
	$(CC) -o $@ -shared -fPIC $(CFLAGS) process.c

file.so: file.c
	$(CC) -o $@ -shared -fPIC $(CFLAGS) file.c

struct.so: struct.c struct.h $(QS_LIB)
	$(CC) -o $@ -shared -fPIC $(CFLAGS) struct.c 

format.so: format.c $(QS_LIB)
	$(CC) -o $@ -shared -fPIC $(CFLAGS) format.c

socket.so: socket.c $(QS_LIB)
	$(CC) -o $@ -shared -fPIC $(CFLAGS) socket.c


tstlib.so: tstlib.c $(QS_LIB)
	$(CC) -o $@ -shared -fPIC $(CFLAGS) tstlib.c 

s.o : s.c $(INC)
	$(CC) $(CFLAGS) -c s.c

vm.o : vm.c $(INC) prim.i prim.x
	$(CC) $(CFLAGS) -c vm.c

vm2.o : vm2.c $(INC) prim2.i prim2.x number.i number.x
	$(CC) $(CFLAGS) -c vm2.c

heap.o : heap.c $(INC)
	$(CC) $(CFLAGS) -c heap.c

dyn.o : dyn.c $(INC) $(AVCALL)/avcall.h
	$(CC) $(CFLAGS) -c dyn.c

$(AVCALL)/avcall.h : $(AVCALL_LIB)

$(AVCALL_LIB):
	(cd $(AVCALL) && ./configure && make)

$(GMP_LIB):
	(cd $(GMP) && ./configure && make CFLAGS='-O2 -g')

$(PCRE_LIB):
	(cd $(PCRE_DIR) && ./configure && make)

prim.x : prim.i
	mkoptable prim.i > prim.x

prim2.x : prim2.i
	mkoptable prim2.i > prim2.x

number.x: number.i
	mkoptable number.i > number.x

clean:
	rm -f qscheme s *.o *.so core
	( cd doc &&	$(MAKE) clean )
	( cd sgtk && $(MAKE) clean )

config.h: VERSION
	@perl mkconfig-h

# Rules to build the whatis.qs file
whatis: whatis.qs

whatis.qs: $(SRC) $(WM_FILES)
	@perl mkwhatis $(SRC) $(VM_FILES) > whatis.qs

# Rules to build sgtk
sgtk:
	(cd sgtk && $(MAKE))

tgz:
	tar cvf - autoconf makefile \
	*.[ich] *.scm *.txt .gdbinit .depend \
	mkconfig* mkoptable mkinit mkprim mkvm mkwhatis cfunc h2scm \
	cgen/*.[ch] cgen/makefile \
	VERSION PREV_VERSION CHANGES DROPPED THINKS TODO INSTALL doc/* \
	sgtk/[A-Z]* sgtk/*.[ch] sgtk/*.scm sgtk/makefile sgtk/*defs \
	sgtk/make-gtk-proto sgtk/make-wrapper \
	sgtk/sgtk-typep.[ic] sgtk/*.glade \
	sgtk/gseq/*[^o] \
	sgtk/parse-stab | gzip > s.tar.gz

snapshot: tgz
	(cd ~/html/mpp && touch raw/qscheme/download.mpp && mklocal)

dist: doc htmlpages
	-mkdir $(BUILD_DIR)/qscheme-$(VERSION)
	tar cf - $(DIST_FILES) | (cd $(BUILD_DIR)/qscheme-$(VERSION) && tar xf - )
	(	cd $(BUILD_DIR) ; \
		tar czf $(ARCH_DIR)/qscheme-$(VERSION).tar.gz qscheme-$(VERSION) ; \
		tar xzf $(ARCH_DIR)/qscheme-$(PREV_VERSION).tar.gz ; \
		diff -Naur qscheme-$(PREV_VERSION) qscheme-$(VERSION) | \
		gzip > $(ARCH_DIR)/diff-$(PREV_VERSION)-$(VERSION).gz ; \
		rm -rf qscheme-$(PREV_VERSION) qscheme-$(VERSION) ; \
	) ; \
	(cd ~/html/mpp && touch raw/qscheme/download.mpp && mklocal)

htmlpages:
	touch $(MPP_RAW)/qscheme/download.mpp
	[ -e $(MPP_QS_FILES)/qscheme-$(VERSION).tar.gz ] || \
		 ln -s $(ARCH_DIR)/qscheme-$(VERSION).tar.gz \
			   $(MPP_QS_FILES)/qscheme-$(VERSION).tar.gz
	[ -e $(MPP_QS_FILES)/diff-$(PREV_VERSION)-$(VERSION).gz ] || \
		 ln -s $(ARCH_DIR)/diff-$(PREV_VERSION)-$(VERSION).gz \
			   $(MPP_QS_FILES)/diff-$(PREV_VERSION)-$(VERSION).gz
	(cd $(MPP) && mklocal)

pkg:
	prcs package -z s /tmp/s.pkz
	mcopy -o /tmp/s.pkz a:

unpkg:
	mcopy -o a:/s.pkz /tmp
	prcs unpackage /tmp/s.pkz

depend:
	$(CC) $(CFLAGS) -MM $(SRC) > .depend

config: chkstack
	@echo "/* generated by make config: " `date` > config.h
	@echo " * DONT EDIT" >> config.h
	@echo " */"          >> config.h
	@chkstack 			 >> config.h

chkstack: chkstack.c
	$(CC) -o chkstack chkstack.c

include .depend
