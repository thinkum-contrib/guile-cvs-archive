;;;; threads.test --- tests guile's threads     -*- scheme -*-
;;;; Copyright (C) 2000 Free Software Foundation, Inc.
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2, or (at your option)
;;;; any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this software; see the file COPYING.  If not, write to
;;;; the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
;;;; Boston, MA 02111-1307 USA
;;;;
;;;; As a special exception, the Free Software Foundation gives permission
;;;; for additional uses of the text contained in its release of GUILE.
;;;;
;;;; The exception is that, if you link the GUILE library with other files
;;;; to produce an executable, this does not by itself cause the
;;;; resulting executable to be covered by the GNU General Public License.
;;;; Your use of that executable is in no way restricted on account of
;;;; linking the GUILE library code into it.
;;;;
;;;; This exception does not however invalidate any other reasons why
;;;; the executable file might be covered by the GNU General Public License.
;;;;
;;;; This exception applies only to the code released by the
;;;; Free Software Foundation under the name GUILE.  If you copy
;;;; code from other Free Software Foundation releases into a copy of
;;;; GUILE, as the General Public License permits, the exception does
;;;; not apply to the code that you add in this way.  To avoid misleading
;;;; anyone as to the status of such modified files, you must delete
;;;; this exception notice from them.
;;;;
;;;; If you write modifications of your own for GUILE, it is your choice
;;;; whether to permit this exception to apply to your modifications.
;;;; If you do not wish that, delete this exception notice.  

(use-modules (ice-9 doc))


;;;
;;; miscellaneous
;;;


(define (pass-if-documented identifier)
  (with-test-prefix "documented?"
    (pass-if identifier
      (let ((documented #f))
	(with-output-to-string
	  (lambda ()
	    (set! documented (documentation identifier))))
	documented))))


;;;
;;; mutecis
;;;

(with-test-prefix "mutecis"

  ;; Is documentation available?

  (pass-if-documented "make-mutex")

  (pass-if-documented "mutex?")

  (pass-if-documented "mutex-lock")

  (pass-if-documented "mutex-trylock")

  (pass-if-documented "mutex-unlock")

  ;; Functionality

  (with-test-prefix "mutex? obj"

    (pass-if "obj = <new mutex>"
      (let ((m (make-mutex)))
	(mutex? m)))

    (pass-if "obj = <locked mutex>"
      (let ((m (make-mutex)))
	(mutex-lock m)
	(mutex? m)))

    (pass-if "obj = <trylocked mutex>"
      (let ((m (make-mutex)))
	(mutex-trylock m)
	(mutex? m)))

    (pass-if "obj = <unlocked mutex>"
      (let ((m (make-mutex)))
	(mutex-lock m)
	(mutex-unlock m)
	(mutex? m)))

    (pass-if "obj = <untrylocked mutex>"
      (let ((m (make-mutex)))
	(mutex-trylock m)
	(mutex-unlock m)
	(mutex? m)))

    (pass-if "obj = <inum>"
      (not (mutex? 0))))

  (with-test-prefix "mutex-trylock"

    (pass-if "obj = <new mutex>"
      (let ((m (make-mutex)))
	(mutex-trylock m)))

    (pass-if "obj = <locked mutex>"
      (let ((m (make-mutex)))
	(mutex-lock m)
	(not (mutex-trylock m))))

    (pass-if "obj = <trylocked mutex>"
      (let ((m (make-mutex)))
	(mutex-trylock m)
	(not (mutex-trylock m))))

    (pass-if "obj = <unlocked mutex>"
      (let ((m (make-mutex)))
	(mutex-lock m)
	(mutex-unlock m)
	(mutex-trylock m)))

    (pass-if "obj = <untrylocked mutex>"
      (let ((m (make-mutex)))
	(mutex-trylock m)
	(mutex-unlock m)
	(mutex-trylock m)))))

;;;
;;; condition variables
;;;
