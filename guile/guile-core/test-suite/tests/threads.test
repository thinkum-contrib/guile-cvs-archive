;;;; threads.test --- tests guile's threads     -*- scheme -*-
;;;; Copyright (C) 2000 Free Software Foundation, Inc.
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2, or (at your option)
;;;; any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this software; see the file COPYING.  If not, write to
;;;; the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
;;;; Boston, MA 02111-1307 USA
;;;;
;;;; As a special exception, the Free Software Foundation gives permission
;;;; for additional uses of the text contained in its release of GUILE.
;;;;
;;;; The exception is that, if you link the GUILE library with other files
;;;; to produce an executable, this does not by itself cause the
;;;; resulting executable to be covered by the GNU General Public License.
;;;; Your use of that executable is in no way restricted on account of
;;;; linking the GUILE library code into it.
;;;;
;;;; This exception does not however invalidate any other reasons why
;;;; the executable file might be covered by the GNU General Public License.
;;;;
;;;; This exception applies only to the code released by the
;;;; Free Software Foundation under the name GUILE.  If you copy
;;;; code from other Free Software Foundation releases into a copy of
;;;; GUILE, as the General Public License permits, the exception does
;;;; not apply to the code that you add in this way.  To avoid misleading
;;;; anyone as to the status of such modified files, you must delete
;;;; this exception notice from them.
;;;;
;;;; If you write modifications of your own for GUILE, it is your choice
;;;; whether to permit this exception to apply to your modifications.
;;;; If you do not wish that, delete this exception notice.  

(use-modules (ice-9 doc))


;;;
;;; miscellaneous
;;;


(define (check-feature feature)
  (if (not (provided? feature))
      (throw 'unsupported)))


(define (documented? identifier)
  (let ((documented #f))
    (with-output-to-string
      (lambda ()
	(set! documented (documentation identifier))))
    documented))


(define (default-error-handler)
  #t)


(defmacro repeat (count body . rest)
  `(let ((c ,count))
     (do ((i 0 (+ i 1)))
	 ((= i ,count))
       ,body
       ,@rest)))


;;;
;;; threads
;;;

(with-test-prefix "threads"

  (with-test-prefix "call-with-new-thread"

    (pass-if "documented?"
      (check-feature 'threads)
      (documented? "call-with-new-thread"))

    (pass-if "thread runs and exits"
      (check-feature 'threads)
      (let* ((flag #f)
	     (function (lambda () (set! flag #t)))
	     (thread (call-with-new-thread function default-error-handler)))
	(thread-join thread)
	flag))

    ;; Check for threads spawning other threads

    ;; Check for correct application of the error handler

    ;; Check for correct handling of parameter errors
    ;; 1) wrong type instead of thread function
    ;; 2) wrong thread function arity
    ;; 3) wrong type instead of handler function
    ;; 4) wrong handler function arity

    )

  (with-test-prefix "thread?"

    (pass-if "documented?"
      (check-feature 'threads)
      (documented? "thread?"))

    (pass-if "new thread"
      (check-feature 'threads)
      (let* ((function (lambda () #t))
	     (t (call-with-new-thread function default-error-handler)))
	(thread? t)))

    (pass-if "non-thread"
      (check-feature 'threads)
      (not (thread? 0))))

  (with-test-prefix "thread-exit"

    (pass-if "documented?"
      (check-feature 'threads)
      (documented? "thread-exit"))

    (pass-if "thread exits appropriately"
      (check-feature 'threads)
      (let* ((flag #f)
	     (function (lambda () (thread-exit 0) (set! flag #t)))
	     (thread (call-with-new-thread function default-error-handler)))
	(thread-join thread)
	(not flag)))

    ;; Check for parameter errors

    )

  (with-test-prefix "thread-cancel"

    (pass-if "documented?"
      (check-feature 'threads)
      (documented? "thread-cancel"))

    (pass-if "thread exits appropriately"
      (check-feature 'threads)
      (throw 'untested)))

  (with-test-prefix "thread-join"

    (pass-if "documented?"
      (check-feature 'threads)
      (documented? "thread-join")))

  (with-test-prefix "thread-yield"

    (pass-if "documented?"
      (check-feature 'coop-threads)
      (documented? "thread-yield"))

    (pass-if "assignment after yield"
      (check-feature 'coop-threads)
      (let* ((flag #f)
	     (function (lambda () (repeat 2 (thread-yield)) (set! flag #t)))
	     (thread (call-with-new-thread function default-error-handler)))
	(not flag)))

    (pass-if "join assignment after yield"
      (check-feature 'coop-threads)
      (let* ((flag #f)
	     (function (lambda () (repeat 3 (thread-yield)) (set! flag #t)))
	     (thread (call-with-new-thread function default-error-handler)))
	(thread-join thread)
	flag))

    (pass-if "assignment after mutual yield"
      (check-feature 'coop-threads)
      (let* ((flag #f)
	     (function (lambda () (repeat 2 (thread-yield)) (set! flag #t)))
	     (thread (call-with-new-thread function default-error-handler)))
	(repeat 4 (thread-yield))
	flag))))


;;;
;;; mutecis
;;;

(with-test-prefix "mutecis"

  (with-test-prefix "make-mutex"

    (pass-if "documented?"
      (check-feature 'threads)
      (documented? "make-mutex")))

  (with-test-prefix "mutex?"

    (pass-if "documented?"
      (check-feature 'threads)
      (documented? "mutex?"))

    (pass-if "new mutex"
      (check-feature 'threads)
      (let ((m (make-mutex)))
	(mutex? m)))

    (pass-if "locked mutex"
      (check-feature 'threads)
      (let ((m (make-mutex)))
	(mutex-lock m)
	(mutex? m)))

    (pass-if "trylocked mutex"
      (check-feature 'threads)
      (let ((m (make-mutex)))
	(mutex-trylock m)
	(mutex? m)))

    (pass-if "unlocked mutex"
      (check-feature 'threads)
      (let ((m (make-mutex)))
	(mutex-lock m)
	(mutex-unlock m)
	(mutex? m)))

    (pass-if "untrylocked mutex"
      (check-feature 'threads)
      (let ((m (make-mutex)))
	(mutex-trylock m)
	(mutex-unlock m)
	(mutex? m)))

    (pass-if "inum"
      (check-feature 'threads)
      (not (mutex? 0))))

  (with-test-prefix "mutex-lock"

    (pass-if "documented?"
      (check-feature 'threads)
      (documented? "mutex-lock")))

  (with-test-prefix "mutex-trylock"

    (pass-if "documented?"
      (check-feature 'threads)
      (documented? "mutex-trylock")))

  (with-test-prefix "mutex-unlock"

    (pass-if "documented?"
      (check-feature 'threads)
      (documented? "mutex-unlock")))

  (with-test-prefix "mutex-trylock"

    (pass-if "new mutex"
      (check-feature 'threads)
      (let ((m (make-mutex)))
	(mutex-trylock m)))

    (pass-if "locked mutex"
      (check-feature 'threads)
      (let ((m (make-mutex)))
	(mutex-lock m)
	(not (mutex-trylock m))))

    (pass-if "trylocked mutex"
      (check-feature 'threads)
      (let ((m (make-mutex)))
	(mutex-trylock m)
	(not (mutex-trylock m))))

    (pass-if "unlocked mutex"
      (check-feature 'threads)
      (let ((m (make-mutex)))
	(mutex-lock m)
	(mutex-unlock m)
	(mutex-trylock m)))

    (pass-if "untrylocked mutex"
      (check-feature 'threads)
      (let ((m (make-mutex)))
	(mutex-trylock m)
	(mutex-unlock m)
	(mutex-trylock m)))))

;;;
;;; condition variables
;;;
