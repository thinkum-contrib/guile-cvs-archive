;;;; time.test --- test suite for Guile's time functions     -*- scheme -*-
;;;; Jim Blandy <jimb@red-bean.com> --- June 1999
;;;;
;;;; 	Copyright (C) 1999, 2004, 2005 Free Software Foundation, Inc.
;;;; 
;;;; This program is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2, or (at your option)
;;;; any later version.
;;;; 
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU General Public License
;;;; along with this software; see the file COPYING.  If not, write to
;;;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;;;; Boston, MA 02110-1301 USA

(use-modules (test-suite lib)
	     (ice-9 regex))

;;;
;;; strftime
;;;

(with-test-prefix "strftime"

  ;; Note we must force isdst to get the ZOW zone name out of %Z on HP-UX.
  ;; If localtime is in daylight savings then it will decide there's no
  ;; daylight savings zone name for the fake ZOW, and come back empty.
  ;;
  ;; This test is disabled because on NetBSD %Z doesn't look at the tm_zone
  ;; field in struct tm passed by guile.  That behaviour is reasonable
  ;; enough since that field is not in C99 so a C99 program won't know it
  ;; has to be set.  For the details on that see
  ;;
  ;;     http://www.netbsd.org/cgi-bin/query-pr-single.pl?number=21722
  ;;
  ;; Not sure what to do about this in guile, it'd be nice for %Z to look at
  ;; tm:zone everywhere.
  ;;
  ;;
  ;; (pass-if "strftime %Z doesn't return garbage"
  ;; 	 (let ((t (localtime (current-time))))
  ;; 	   (set-tm:zone t "ZOW")
  ;; 	   (set-tm:isdst t 0)
  ;; 	   (string=? (strftime "%Z" t)
  ;; 		     "ZOW")))

  (with-test-prefix "C99 %z format"

    ;; C99 spec is empty string if no zone determinable
    ;;
    ;; on pre-C99 systems not sure what to expect if %z unsupported, probably
    ;; "%z" unchanged in C99 if timezone
    ;;
    (define have-strftime-%z
      (not (member (strftime "%z" (gmtime 0))
		   '("" "%z"))))

    ;; %z here is quite possibly affected by the same tm:gmtoff vs current
    ;; zone as %Z above is, so in the following tests we make them the same.

    (pass-if "GMT"
      (or have-strftime-%z (throw 'unsupported))
      (putenv "TZ=GMT+0")
      (tzset)
      (let ((tm (localtime 86400)))
	(string=? "+0000" (strftime "%z" tm))))

    ;; prior to guile 1.6.9 and 1.8.1 this test failed, getting "+0500",
    ;; because we didn't adjust for tm:gmtoff being west of Greenwich versus
    ;; tm_gmtoff being east of Greenwich
    (pass-if "EST+5"
      (or have-strftime-%z (throw 'unsupported))
      (putenv "TZ=EST+5")
      (tzset)
      (let ((tm (localtime 86400)))
	(string=? "-0500" (strftime "%z" tm))))))

;;;
;;; strptime
;;;

(with-test-prefix "strptime"

  (with-test-prefix "GNU %s format"

    ;; "%s" to parse a count of seconds since 1970 is a GNU extension
    (define have-strptime-%s
      (false-if-exception (strptime "%s" "0")))

    (pass-if "gmtoff on GMT"
      (or have-strptime-%s (throw 'unsupported))
      (putenv "TZ=GMT+0")
      (tzset)
      (let ((tm (car (strptime "%s" "86400"))))
	(eqv? 0 (tm:gmtoff tm))))

    ;; prior to guile 1.6.9 and 1.8.1 we didn't pass tm_gmtoff back from
    ;; strptime
    (pass-if "gmtoff on EST+5"
      (or have-strptime-%s (throw 'unsupported))
      (putenv "TZ=EST+5")
      (tzset)
      (let ((tm (car (strptime "%s" "86400"))))
	(eqv? (* 5 3600) (tm:gmtoff tm))))))
