\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-ref.info
@settitle Guile Reference Manual
@c %**end of header

@c Jim's notes:

@c Remember to use "subr" whereever appropriate.
@c Actually, use "primitive", not "subr."  Why coin a new term?
@c FIXME: gotta change existing "subr" uses to "Primitive".
@c In my text for the Guile snarfer, I've used the term "subr" to denote
@c a C function made available to the Scheme world as a function.  This
@c terminology is weird, but consistent with the function names and also
@c with Emacs Lisp, which I assume takes Maclisp's lead.

@set EDITION 1.1a
@set VERSION 1.1a

@c @iftex
@c @cropmarks
@c @end iftex

@dircategory Guile -- GNU extension language
@direntry
* guile-ref: (guile-ref).                       The Guile Reference Manual.
@end direntry

@setchapternewpage off

@ifinfo
Guile Reference Manual
Copyright (C) 1996 Free Software Foundation @*
Copyright (C) 1997 Free Software Foundation

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).
@end ignore

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Free Software Foundation.
@end ifinfo

@titlepage
@sp 10
@comment The title is printed in a large font.
@title Guile Reference Manual
@subtitle $Id$
@subtitle For use with Guile @value{VERSION}
@author Mark Galassi
@author Cygnus Solutions and
@author Los Alamos National Laboratory
@author @email{rosalia@@nis.lanl.gov}
@author
@author Jim Blandy
@author Free Software Foundation
@author @email{jimb@@red-bean.com}
@author
@author Gary Houston
@author @email{ghouston@@actrix.gen.nz}
@author
@author Tim Pierce
@author University of Chicago
@author @email{twpierce@@midway.uchicago.edu}
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@vskip 0pt plus 1filll
Copyright @copyright{} 1996 Free Software Foundation

Copyright @copyright{} 1997 Free Software Foundation

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by Free Software Foundation.
@end titlepage

@c @smallbook
@finalout
@headings double

@c Where to find Guile examples.
@set example-dir doc/examples

@ifinfo
@node Top, Introduction, (dir), (dir)
@top The Guile Reference Manual
@end ifinfo

@menu
Preliminary

* Introduction::
* Using Guile::

Part I: Guile Scheme

* R4RS Scheme as a starting point::
* Block comments and interpreter triggers::
* Symbol case::
* Keywords::
* Modules::
* Exceptions::
* Dynamic Wind::
* Records::
* Structures::
* Arrays::
* Binary Numeric Operations::
* Shared and Read-Only Strings::
* Property Lists::
* Association Lists and Hash Tables::
* Input/Output Ports::
* Garbage Collection::
* Threads and Dynamic Roots::
* Reflection::
* Weak References::
* Regular Expressions::
* SLIB::
* POSIX system calls and networking::
* The Scheme shell (scsh)::
* Tcl/Tk Interface::
* Module Internals::
* Internal Debugging Interface::

Part II: Using Scheme with C --- a Portable Interface

* A Portable C to Scheme Interface::
* gh preliminaries::
* Data types and constants defined by gh::
* Starting and controlling the interpreter::
* Error messages::
* Executing Scheme code::
* Defining new Scheme procedures in C::
* Converting data between C and Scheme::
* Type predicates::
* Equality predicates::
* Memory allocation and garbage collection::
* Calling Scheme procedures from C::
* Mixing gh and scm APIs::

Part III: Using Scheme with C --- Guile's Interface

* Linking Guile with your code::
* Scheme data representation::
* Relationship between Scheme and C functions::
* I/O internals::
* libguile error handling::
* snarfing::

Appendices and Indices

* Obtaining and Installing Guile::
* Invoking Guile::
* debugger user interface::
* Indices::

* Concept Index::
* Procedure Index::
* Variable Index::
* Type Index::

@end menu

@c preliminary
@iftex
@page
@unnumbered{Preliminary Information}
@end iftex

@include intro.texi

@c programming in Scheme
@iftex
@page
@unnumbered{Part I: Guile Scheme}
@end iftex

@include scheme.texi

@c Hybrid programming -- C and Scheme
@iftex
@page
@unnumbered{Part II: Using Scheme with C --- a Portable Interface}
@end iftex

@include gh.texi

@iftex
@page
@unnumbered{Part III: Using Scheme with C --- Guile's Interface}
@end iftex

@include scm.texi

@c Appendices and Indices
@iftex
@page
@unnumbered{Appendices and Indices}
@end iftex

@include appendices.texi

@contents

@bye
