@node POSIX System Calls and Networking
@chapter POSIX System Calls and Networking

@menu
* Conventions::                 Conventions employed by the POSIX interface.
* Ports and File Descriptors::	Scheme ``ports'' and Unix file descriptors
				  have different representations.
* File System::			stat, chown, chmod, etc.
* User Information::		Retrieving a user's GECOS (/etc/passwd) entry.
* Time::			gettimeofday, localtime, strftime, etc.
* Runtime Environment::         Accessing and modifying Guile's environment.
* Processes::			getuid, getpid, etc.
* Signals::                     sigaction, kill, pause, alarm, etc.
* Terminals and Ptys::		ttyname, tcsetpgrp, etc.
* Pipes::			Communicating data between processes.
* Networking::			gethostbyaddr, getnetent, socket, bind, listen.
* System Identification::	`uname' and getting info about this machine.
* Locales::                     setlocale, etc.
@end menu

@node Conventions
@section POSIX Interface Conventions

These interfaces provide access to operating system facilities.
They provide a simple wrapping around the underlying C interfaces
to make usage from Scheme more convenient.  They are also used
to implement the Guile port of @ref{The Scheme shell (scsh)}.

Generally there is a single procedure for each corresponding Unix
facility.  There are some exceptions, such as procedures implemented for
speed and convenience in Scheme with no primitive Unix equivalent,
e.g., @code{copy-file}.

The interfaces are intended as far as possible to be portable across
different versions of Unix.  In some cases procedures which can't be
implemented on particular systems may become no-ops, or perform limited
actions.  In other cases they may throw errors. 

General naming conventions are as follows:

@itemize @bullet
@item
The Scheme name is often identical to the name of the underlying Unix
facility.
@item
Underscores in Unix procedure names are converted to hyphens.
@item
Procedures which destructively modify Scheme data have exclaimation
marks appended, e.g., @code{recv!}.
@item
Predicates (returning only @code{#t} or @code{#f}) have question marks
appended, e.g., @code{access?}.
@item
Some names are changed to avoid conflict with dissimilar interfaces
defined by scsh, e.g., @code{primitive-fork}.
@item
Unix preprocessor names such as @code{EPERM} or @code{R_OK} are converted
to Scheme variables of the same name (underscores are not replaced
with hyphens).
@end itemize

Unexpected conditions are generally handled by raising exceptions.
There are a few procedures which return a special value if they don't
succeed, e.g., @code{getenv} returns @code{#f} if it the requested
string is not found in the environment.  These cases are noted in
the documentation.

For ways to deal with exceptions, @ref{Exceptions}.

Errors which the C-library would report by returning a NULL
pointer or through some other means are reported by raising a
@code{system-error} exception.
The value of the Unix @code{errno} variable is available
in the data passed by the exception. 

Here's an ad-hoc@footnote{This may be changed in the future; be prepared
to rewrite this sort of code.} way to extract the @code{errno} value
from an exception:

@example
(catch
 'system-error
 (lambda ()
   (mkdir "/this-ought-to-fail-if-I'm-not-root"))
 (lambda stuff
   (let ((errno (car (list-ref stuff 4))))
     (cond
      ((= errno EACCES)
       (display "You're not allowed to do that."))
      ((= errno EEXIST)
       (display "Already exists."))
      (#t
       (display (strerror errno))))
     (newline))))
@end example

The important thing to note is that the @code{errno} value can be
extracted with @code{(car (list-ref stuff 4))}.

@node Ports and File Descriptors
@section Ports and File Descriptors

Conventions generally follow those of scsh, @ref{The Scheme shell (scsh)}.

File ports are implemented using low-level operating system I/O
facilities, with optional buffering to improve efficiency
@pxref{File Ports}

Note that some procedures (e.g., @code{recv!}) will accept ports as
arguments, but will actually operate directly on the file descriptor
underlying the port.  Any port buffering is ignored, including the
buffer which implements @code{peek-char} and @code{unread-char}.

The @code{force-output} and @code{drain-input} procedures can be used
to clear the buffers.

Each open file port has an associated operating system file descriptor.
File descriptors are generally not useful in Scheme programs; however
they may be needed when interfacing with foreign code and the Unix
environment.

A file descriptor can be extracted from a port and a new port can be
created from a file descriptor.  However a file descriptor is just an
integer and the garbage collector doesn't recognise it as a reference
to the port.  If all other references to the port were dropped, then
it's likely that the garbage collector would free the port, with the
side-effect of closing the file descriptor prematurely.

To assist the programmer in avoiding this problem, each port has an
associated "revealed count" which can be used to keep track of how many
times the underlying file descriptor has been stored in other places.
If a port's revealed count is greater than zero, the file descriptor
will not be closed when the port is gabage collected.  A programmer
can therefore ensure that the revealed count will be greater than
zero if the file descriptor is needed elsewhere.

For the simple case where a file descriptor is "imported" once to become
a port, it does not matter if the file descriptor is closed when the
port is garbage collected.  There is no need to maintain a revealed
count.  Likewise when "exporting" a file descriptor to the external
environment, setting the revealed count is not required provided the
port is kept open (i.e., is pointed to by a live Scheme binding) while
the file descriptor is in use.

To correspond with traditional Unix behaviour, the three file
descriptors (0, 1 and 2) are automatically imported when a program
starts up and assigned to the initial values of the current input,
output and error ports.  The revealed count for each is initially set to
one, so that dropping references to one of these ports will not result
in its garbage collection: it could be retrieved with fdopen or
fdes->ports.

@c docstring begin (c-doc-string "ports.c" "port-revealed")
@c docstring md5 "1b7c38c06c8f072cdafa2710b72f7f3b"
@deffn primitive port-revealed port
Returns the revealed count for @var{port}.
@end deffn

@c docstring begin (c-doc-string "ports.c" "set-port-revealed!")
@c docstring md5 "84596c3911799dc63419755ab4a79901"
@deffn primitive set-port-revealed! port rcount
Sets the revealed count for a port to a given value.
The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "ioext.c" "fileno")
@c docstring md5 "96b7af8fd2b539a34033de7db0bc414c"
@deffn primitive fileno port
Returns the integer file descriptor underlying @var{port}.
Does not change its revealed count.
@end deffn

@deffn procedure port->fdes port
Returns the integer file descriptor underlying @var{port}.  As a
side effect the revealed count of @var{port} is incremented.
@end deffn

@c docstring begin (c-doc-string "ioext.c" "fdopen")
@c docstring md5 "71ccc066db901cf5d9a5758eb2cf15ab"
@deffn primitive fdopen fdes modes
Returns a new port based on the file descriptor @var{fdes}.
Modes are given by the string @var{modes}.  The revealed count of the port
is initialized to zero.  The modes string is the same as that accepted
by @ref{File Ports, open-file}.
@end deffn

@c docstring begin (c-doc-string "ioext.c" "fdes->ports")
@c docstring md5 "1b8dd9a8d7712545b06371a15ef9664a"
@deffn primitive fdes->ports fd
Returns a list of existing ports which have @var{fdes} as an
underlying file descriptor, without changing their revealed counts.
@end deffn

@deffn procedure fdes->inport fdes
Returns an existing input port which has @var{fdes} as its underlying file
descriptor, if one exists, and increments its revealed count.
Otherwise, returns a new input port with a revealed count of 1.
@end deffn

@deffn procedure fdes->outport fdes
Returns an existing output port which has @var{fdes} as its underlying file
descriptor, if one exists, and increments its revealed count.
Otherwise, returns a new output port with a revealed count of 1.
@end deffn

@c docstring begin (c-doc-string "ioext.c" "primitive-move->fdes")
@c docstring md5 "d8ad943dd458d64daaa8b72f1e03c0f9"
@deffn primitive primitive-move->fdes port fd
Moves the underlying file descriptor for @var{port} to the integer
value @var{fdes} without changing the revealed count of @var{port}.
Any other ports already using this descriptor will be automatically
shifted to new descriptors and their revealed counts reset to zero.
The return value is @code{#f} if the file descriptor already had the
required value or @code{#t} if it was moved.
@end deffn

@deffn procedure move->fdes port fdes
Moves the underlying file descriptor for @var{port} to the integer
value @var{fdes} and sets its revealed count to one.  Any other ports
already using this descriptor will be automatically
shifted to new descriptors and their revealed counts reset to zero.
The return value is unspecified.
@end deffn

@deffn procedure release-port-handle port
Decrements the revealed count for a port.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "fsync")
@c docstring md5 "6978ec5715e3c25f0189963c4ec3bed0"
@deffn primitive fsync object
Copies any unwritten data for the specified output file descriptor to disk.
If @var{port/fd} is a port, its buffer is flushed before the underlying
file descriptor is fsync'd.
The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "open")
@c docstring md5 "a85466a480dd4c11058d32f5dd5b211f"
@deffn primitive open path flags [mode]
Open the file named by @var{path} for reading and/or writing.
@var{flags} is an integer specifying how the file should be opened.
@var{mode} is an integer specifying the permission bits of the file, if
it needs to be created, before the umask is applied.  The default is 666
(Unix itself has no default).

@var{flags} can be constructed by combining variables using @code{logior}.
Basic flags are:

@defvar O_RDONLY
Open the file read-only.
@end defvar
@defvar O_WRONLY
Open the file write-only. 
@end defvar
@defvar O_RDWR
Open the file read/write.
@end defvar
@defvar O_APPEND
Append to the file instead of truncating.
@end defvar
@defvar O_CREAT
Create the file if it does not already exist.
@end defvar

See the Unix documentation of the @code{open} system call
for additional flags.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "open-fdes")
@c docstring md5 "90888c2d7883edc7ecc98055b058a6e3"
@deffn primitive open-fdes path flags [mode]
Similar to @code{open} but returns a file descriptor instead of a
port.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "close")
@c docstring md5 "7efb0d041e4df8717bc3265908e10d19"
@deffn primitive close fd_or_port
Similar to close-port (@pxref{Generic Port Operations, close-port}),
but also works on file descriptors.  A side
effect of closing a file descriptor is that any ports using that file
descriptor are moved to a different file descriptor and have
their revealed counts set to zero.
@end deffn

@c docstring begin (c-doc-string "ports.c" "unread-char")
@deffn primitive unread-char char [port]
Place @var{char} in @var{port} so that it will be read by the
next read operation.  If called multiple times, the unread characters
will be read again in last-in first-out order.  If @var{port} is
not supplied, the current input port is used.
@end deffn

@c docstring begin (c-doc-string "ports.c" "unread-string")
@c docstring md5 "7b185a3d540acdf2ec7f6b114c6c3c80"
@deffn primitive unread-string str port
Place the string @var{str} in @var{port} so that its characters will be
read in subsequent read operations.  If called multiple times, the
unread characters will be read again in last-in first-out order.  If
@var{port} is not supplied, the current-input-port is used.
@end deffn

@c docstring begin (c-doc-string "posix.c" "pipe")
@c docstring md5 "b21d64a66a4e2c47fece645b9828d479"
@deffn primitive pipe
Returns a newly created pipe: a pair of ports which are linked
together on the local machine.  The CAR is the input port and
the CDR is the output port.  Data written (and flushed) to the
output port can be read from the input port.
Pipes are commonly used for communication with a newly
forked child process.  The need to flush the output port
can be avoided by making it unbuffered using @code{setvbuf}.

Writes occur atomically provided the size of the data in
bytes is not greater than the value of @code{PIPE_BUF}
Note that the output port is likely to block if too much data
(typically equal to @code{PIPE_BUF}) has been written but not
yet read from the input port

@end deffn

The next group of procedures perform a @code{dup2}
system call, if @var{newfd} (an
integer) is supplied, otherwise a @code{dup}.  The file descriptor to be
duplicated can be supplied as an integer or contained in a port.  The
type of value returned varies depending on which procedure is used.

All procedures also have the side effect when performing @code{dup2} that any
ports using @var{newfd} are moved to a different file descriptor and have
their revealed counts set to zero.

@c docstring begin (c-doc-string "ioext.c" "dup->fdes")
@c docstring md5 "e08bccef01e4894730c1769700b7bec4"
@deffn primitive dup->fdes fd_or_port [fd]
Returns an integer file descriptor.
@end deffn

@deffn procedure dup->inport port/fd [newfd]
Returns a new input port using the new file descriptor.
@end deffn

@deffn procedure dup->outport port/fd [newfd]
Returns a new output port using the new file descriptor.
@end deffn

@deffn procedure dup port/fd [newfd]
Returns a new port if @var{port/fd} is a port, with the same mode as the
supplied port, otherwise returns an integer file descriptor.
@end deffn

@deffn procedure dup->port port/fd mode [newfd]
Returns a new port using the new file descriptor.  @var{mode} supplies a 
mode string for the port (@pxref{File Ports, open-file}).
@end deffn

@deffn procedure duplicate-port port modes
Returns a new port which is opened on a duplicate of the file
descriptor underlying @var{port}, with mode string @var{modes}
as for @ref{File Ports, open-file}.  The two ports
will share a file position and file status flags.

Unexpected behaviour can result if both ports are subsequently used
and the original and/or duplicate ports are buffered.
The mode string can include @code{0} to obtain an unbuffered duplicate
port.

This procedure is equivalent to @code{(dup->port @var{port} @var{modes})}.
@end deffn

@c docstring begin (c-doc-string "ioext.c" "redirect-port")
@c docstring md5 "22f3981d9fbf44f4167feb4bd623445c"
@deffn primitive redirect-port old new
This procedure takes two ports and duplicates the underlying file
descriptor from @var{old-port} into @var{new-port}.  The
current file descriptor in @var{new-port} will be closed.
After the redirection the two ports will share a file position
and file status flags.

The return value is unspecified.

Unexpected behaviour can result if both ports are subsequently used
and the original and/or duplicate ports are buffered.

This procedure does not have any side effects on other ports or
revealed counts.
@end deffn

@c docstring begin (c-doc-string "ports.c" "port-mode")
@c docstring md5 "cbcb46422ab6eb230fd54bb014026d79"
@deffn primitive port-mode port
Returns the port modes associated with the open port @var{port}.  These
will not necessarily be identical to the modes used when the port was
opened, since modes such as "append" which are used only during
port creation are not retained.
@end deffn

@c docstring begin (c-doc-string "ports.c" "close-all-ports-except")
@c docstring md5 "cc236f9737a0e718d33eb00106cd33f9"
@deffn primitive close-all-ports-except . ports
Close all open file ports used by the interpreter
except for those supplied as arguments.  This procedure
is intended to be used before an exec call to close file descriptors
which are not needed in the new process.
@end deffn

@c docstring begin (c-doc-string "fports.c" "setvbuf")
@c docstring md5 "5395a53e279959cd6b364a3411887c0b"
@deffn primitive setvbuf port mode [size]
Set the buffering mode for @var{port}.  @var{mode} can be:
@table @code
@item _IONBF
non-buffered
@item _IOLBF
line buffered
@item _IOFBF
block buffered, using a newly allocated buffer of @var{size} bytes.
If @var{size} is omitted, a default size will be used.
@end table
@end deffn

@c docstring begin (c-doc-string "filesys.c" "fcntl")
@c docstring md5 "bcba351d5e557d889d805a4a159474f9"
@deffn primitive fcntl object cmd [value]
Apply @var{command} to the specified file descriptor or the underlying
file descriptor of the specified port.  @var{value} is an optional
integer argument.

Values for @var{command} are:

@table @code
@item F_DUPFD
Duplicate a file descriptor
@item F_GETFD
Get flags associated with the file descriptor.
@item F_SETFD
Set flags associated with the file descriptor to @var{value}.
@item F_GETFL
Get flags associated with the open file.
@item F_SETFL
Set flags associated with the open file to @var{value}
@item F_GETOWN
Get the process ID of a socket's owner, for @code{SIGIO} signals.
@item F_SETOWN
Set the process that owns a socket to @var{value}, for @code{SIGIO} signals.
@item FD_CLOEXEC
The value used to indicate the "close on exec" flag with @code{F_GETFL} or
@code{F_SETFL}.
@end table
@end deffn

@c docstring begin (c-doc-string "filesys.c" "select")
@c docstring md5 "3a9976b72e1ed744c099ec8cccd9091e"
@deffn primitive select reads writes excepts [secs [usecs]]
This procedure has a variety of uses: waiting for the ability
to provide input, accept output, or the existance of
exceptional conditions on a collection of ports or file
descriptors, or waiting for a timeout to occur.
It also returns if interrupted by a signal.

@var{reads}, @var{writes} and @var{excepts} can be lists or
vectors, with each member a port or a file descriptor.
The value returned is a list of three corresponding
lists or vectors containing only the members which meet the
specified requirement.  The ability of port buffers to
provide input or accept output is taken into account.
Ordering of the input lists or vectors is not preserved.

The optional arguments @var{secs} and @var{usecs} specify the
timeout.  Either @var{secs} can be specified alone, as
either an integer or a real number, or both @var{secs} and
@var{usecs} can be specified as integers, in which case
@var{usecs} is an additional timeout expressed in
microseconds.  If @var{secs} is omitted or is @code{#f} then
select will wait for as long as it takes for one of the other
conditions to be satisfied.

The scsh version of @code{select} differs as follows:
Only vectors are accepted for the first three arguments.
The @var{usecs} argument is not supported.
Multiple values are returned instead of a list.
Duplicates in the input vectors appear only once in output.
An additional @code{select!} interface is provided.

@end deffn

@node File System
@section File System

These procedures allow querying and setting file system attributes
(such as owner,
permissions, sizes and types of files); deleting, copying, renaming and
linking files; creating and removing directories and querying their
contents; syncing the file system and creating special files.

@c docstring begin (c-doc-string "posix.c" "access?")
@c docstring md5 "fec352f04f8b19b3630c323ba6335b50"
@deffn primitive access? path how
Returns @code{#t} if @var{path} corresponds to an existing
file and the current process
has the type of access specified by @var{how}, otherwise 
@code{#f}.
@var{how} should be specified
using the values of the variables listed below.  Multiple values can
be combined using a bitwise or, in which case @code{#t} will only
be returned if all accesses are granted.

Permissions are checked using the real id of the current process,
not the effective id, although it's the effective id which determines
whether the access would actually be granted.

@defvar R_OK
test for read permission.
@end defvar
@defvar W_OK
test for write permission.
@end defvar
@defvar X_OK
test for execute permission.
@end defvar
@defvar F_OK
test for existence of the file.
@end defvar
@end deffn

@findex fstat
@c docstring begin (c-doc-string "filesys.c" "stat")
@c docstring md5 "6258bdc5e2a1fdc5765d0b8ae45d6162"
@deffn primitive stat object
Returns an object containing various information
about the file determined by @var{obj}.
@var{obj} can be a string containing a file name or a port or integer file
descriptor which is open on a file (in which case @code{fstat} is used
as the underlying system call).

The object returned by @code{stat} can be passed as a single parameter
to the following procedures, all of which return integers:

@table @code
@item stat:dev
The device containing the file.
@item stat:ino
The file serial number, which distinguishes this file from all other
files on the same device.
@item stat:mode
The mode of the file.  This includes file type information
and the file permission bits.  See @code{stat:type} and @code{stat:perms}
below.
@item stat:nlink
The number of hard links to the file.
@item stat:uid
The user ID of the file's owner.
@item stat:gid
The group ID of the file.
@item stat:rdev
Device ID; this entry is defined only for character or block
special files.
@item stat:size
The size of a regular file in bytes.
@item stat:atime
The last access time for the file.
@item stat:mtime
The last modification time for the file.
@item stat:ctime
The last modification time for the attributes of the file.
@item stat:blksize
The optimal block size for reading or writing the file, in bytes.
@item stat:blocks
The amount of disk space that the file occupies measured in units of
512 byte blocks.
@end table

In addition, the following procedures return the information
from stat:mode in a more convenient form:

@table @code
@item stat:type
A symbol representing the type of file.  Possible values are
regular, directory, symlink, block-special, char-special,
fifo, socket and unknown
@item stat:perms
An integer representing the access permission bits.
@end table
@end deffn

@c docstring begin (c-doc-string "filesys.c" "lstat")
@c docstring md5 "d3bc46e5d4874ca97d101da839e9fa2c"
@deffn primitive lstat str
Similar to @code{stat}, but does not follow symbolic links, i.e.,
it will return information about a symbolic link itself, not the 
file it points to.  @var{path} must be a string.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "readlink")
@c docstring md5 "70c166689a39a0484ca8722dc9b6e3b9"
@deffn primitive readlink path
Returns the value of the symbolic link named by
@var{path} (a string), i.e., the
file that the link points to.
@end deffn

@findex fchown
@findex lchown
@c docstring begin (c-doc-string "filesys.c" "chown")
@c docstring md5 "ac17eac22a6c30da8c8c0a22e6bd44fd"
@deffn primitive chown object owner group
Change the ownership and group of the file referred to by @var{object} to
the integer values @var{owner} and @var{group}.  @var{object} can be
a string containing a file name or, if the platform
supports fchown, a port or integer file descriptor
which is open on the file.  The return value
is unspecified.

If @var{object} is a symbolic link, either the
ownership of the link or the ownership of the referenced file will be
changed depending on the operating system (lchown is
unsupported at present).  If @var{owner} or @var{group} is specified
as @code{-1}, then that ID is not changed.
@end deffn

@findex fchmod
@c docstring begin (c-doc-string "filesys.c" "chmod")
@c docstring md5 "0e1f7a11f4dc6e5da3d7d18568051261"
@deffn primitive chmod object mode
Changes the permissions of the file referred to by @var{obj}.
@var{obj} can be a string containing a file name or a port or integer file
descriptor which is open on a file (in which case @code{fchmod} is used
as the underlying system call).
@var{mode} specifies
the new permissions as a decimal number, e.g., @code{(chmod "foo" #o755)}.
The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "utime")
@c docstring md5 "a597b09b22a3bc59ca04020d6bb400a1"
@deffn primitive utime pathname [actime [modtime]]
@code{utime} sets the access and modification times for
the file named by @var{path}.  If @var{actime} or @var{modtime}
is not supplied, then the current time is used.
@var{actime} and @var{modtime}
must be integer time values as returned by the @code{current-time}
procedure.

E.g.,

@smalllisp
(utime "foo" (- (current-time) 3600))
@end smalllisp

will set the access time to one hour in the past and the modification
time to the current time.
@end deffn

@findex unlink
@c docstring begin (c-doc-string "filesys.c" "delete-file")
@c docstring md5 "17c3347fef1336332a4f969555bf219d"
@deffn primitive delete-file str
Deletes (or "unlinks") the file specified by @var{path}.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "copy-file")
@c docstring md5 "137aa2aa9468d418b6a13e3813c47ae6"
@deffn primitive copy-file oldfile newfile
Copy the file specified by @var{path-from} to @var{path-to}.
The return value is unspecified.
@end deffn

@findex rename
@c docstring begin (c-doc-string "filesys.c" "rename-file")
@c docstring md5 "2227b92a3acae923dfd02ba05cc96f96"
@deffn primitive rename-file oldname newname
Renames the file specified by @var{path-from} to @var{path-to}.
The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "link")
@c docstring md5 "9c6d02d42828001aa16a5fee686d0bea"
@deffn primitive link oldpath newpath
Creates a new name @var{path-to} in the file system for the file
named by @var{path-from}.  If @var{path-from} is a symbolic link, the
link may or may not be followed depending on the system.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "symlink")
@c docstring md5 "31fd2786fc026c9944eb29996d3e9b52"
@deffn primitive symlink oldpath newpath
Create a symbolic link named @var{path-to} with the value (i.e., pointing to)
@var{path-from}.  The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "mkdir")
@c docstring md5 "e67a54a12f318c54aa999605f4f49d88"
@deffn primitive mkdir path [mode]
Create a new directory named by @var{path}.  If @var{mode} is omitted
then the permissions of the directory file are set using the current
umask.  Otherwise they are set to the decimal value specified with
@var{mode}.  The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "rmdir")
@c docstring md5 "e058b4b205337d0817fd5e7d27235c67"
@deffn primitive rmdir path
Remove the existing directory named by @var{path}.  The directory must
be empty for this to succeed.  The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "opendir")
@c docstring md5 "5915ceb721cbe59a4dd75673276f0a0e"
@deffn primitive opendir dirname
Open the directory specified by @var{path} and return a directory
stream.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "directory-stream?")
@c docstring md5 "0c75fe0d0847c50736785514575e77c4"
@deffn primitive directory-stream? obj
Returns a boolean indicating whether @var{object} is a directory stream
as returned by @code{opendir}.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "readdir")
@c docstring md5 "0e21ed21b970dcae94e724bf996eee8c"
@deffn primitive readdir port
Return (as a string) the next directory entry from the directory stream
@var{stream}.  If there is no remaining entry to be read then the
end of file object is returned.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "rewinddir")
@c docstring md5 "14f889dbb2edfc4ac8aed8c2ff3b5ae1"
@deffn primitive rewinddir port
Reset the directory port @var{stream} so that the next call to
@code{readdir} will return the first directory entry.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "closedir")
@c docstring md5 "2122c53d261111a56719cd5791d00702"
@deffn primitive closedir port
Close the directory stream @var{stream}.
The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "sync")
@c docstring md5 "809c00c0d6bb882356fbbaf6dd0ac9ac"
@deffn primitive sync
Flush the operating system disk buffers.
The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "mknod")
@c docstring md5 "37bb82ebe81454e550e191712db6cc1d"
@deffn primitive mknod path type perms dev
Creates a new special file, such as a file corresponding to a device.
@var{path} specifies the name of the file.  @var{type} should
be one of the following symbols:
regular, directory, symlink, block-special, char-special,
fifo, or socket.  @var{perms} (an integer) specifies the file permissions.
@var{dev} (an integer) specifies which device the special file refers
to.  Its exact interpretation depends on the kind of special file
being created.

E.g.,
@example
(mknod "/dev/fd0" 'block-special #o660 (+ (* 2 256) 2))
@end example

The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "tmpnam")
@c docstring md5 "3bdd82c1272c895eec4c85721803e3a4"
@deffn primitive tmpnam
Create a new file in the file system with a unique name.  The return
value is the name of the new file.  This function is implemented with
the @code{tmpnam} function in the system libraries.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "dirname")
@c docstring md5 "c8dcb11b303d7bb6960a0ed4bfb161c9"
@deffn primitive dirname filename

@end deffn

@c docstring begin (c-doc-string "filesys.c" "basename")
@c docstring md5 "d7bfcd5fcff6d8e4de208ef039d997e2"
@deffn primitive basename filename [suffix]

@end deffn


@node User Information
@section User Information

The facilities in this section provide an interface to the user and
group database.
They should be used with care since they are not reentrant.

The following functions accept an object representing user information
and return a selected component:

@table @code
@item passwd:name
The name of the userid.
@item passwd:passwd
The encrypted passwd.
@item passwd:uid
The user id number.
@item passwd:gid
The group id number.
@item passwd:gecos
The full name.
@item passwd:dir
The home directory.
@item passwd:shell
The login shell.
@end table

@deffn procedure getpwuid uid
Look up an integer userid in the user database.
@end deffn

@deffn procedure getpwnam name
Look up a user name string in the user database.
@end deffn

@deffn procedure setpwent
Initializes a stream used by @code{getpwent} to read from the user database.
The next use of @code{getpwent} will return the first entry.  The
return value is unspecified.
@end deffn

@deffn procedure getpwent
Return the next entry in the user database, using the stream set by
@code{setpwent}.
@end deffn

@deffn procedure endpwent
Closes the stream used by @code{getpwent}.  The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "setpw")
@c docstring md5 "f39c63ddaf54069d21088cde473078ee"
@deffn primitive setpw [arg]
If called with a true argument, initialize or reset the password data
stream.  Otherwise, close the stream.  The @code{setpwent} and
@code{endpwent} procedures are implemented on top of this.
@end deffn

@c docstring begin (c-doc-string "posix.c" "getpw")
@c docstring md5 "d05295a6037f032998eb0c4927943258"
@deffn primitive getpw [user]
Look up an entry in the user database.  @var{obj} can be an integer,
a string, or omitted, giving the behaviour of getpwuid, getpwnam
or getpwent respectively.
@end deffn

The following functions accept an object representing group information
and return a selected component:

@table @code
@item group:name
The group name.
@item group:passwd
The encrypted group password.
@item group:gid
The group id number.
@item group:mem
A list of userids which have this group as a supplimentary group.
@end table

@deffn procedure getgrgid gid
Look up an integer groupid in the group database.
@end deffn

@deffn procedure getgrnam name
Look up a group name in the group database.
@end deffn

@deffn procedure setgrent
Initializes a stream used by @code{getgrent} to read from the group database.
The next use of @code{getgrent} will return the first entry.
The return value is unspecified.
@end deffn

@deffn procedure getgrent
Return the next entry in the group database, using the stream set by
@code{setgrent}.
@end deffn

@deffn procedure endgrent
Closes the stream used by @code{getgrent}.
The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "setgr")
@c docstring md5 "c6e15cd397d2ca16aadcb82a424d1237"
@deffn primitive setgr [arg]
If called with a true argument, initialize or reset the group data
stream.  Otherwise, close the stream.  The @code{setgrent} and
@code{endgrent} procedures are implemented on top of this.
@end deffn

@c docstring begin (c-doc-string "posix.c" "getgr")
@c docstring md5 "19d002f8bf8c9b053e5b627ef0c0c12f"
@deffn primitive getgr [name]
Look up an entry in the group database.  @var{obj} can be an integer,
a string, or omitted, giving the behaviour of getgrgid, getgrnam
or getgrent respectively.
@end deffn

@node Time
@section Time

@c docstring begin (c-doc-string "stime.c" "current-time")
@c docstring md5 "76ada7f61352b11add7ccf27e827c00e"
@deffn primitive current-time
Returns the number of seconds since 1970-01-01 00:00:00 UTC, excluding
leap seconds.
@end deffn

@c docstring begin (c-doc-string "stime.c" "gettimeofday")
@c docstring md5 "6173388c8f5f06a9e6e617b7fbff8b06"
@deffn primitive gettimeofday
Returns a pair containing the number of seconds and microseconds since
1970-01-01 00:00:00 UTC, excluding leap seconds.  Note: whether true
microsecond resolution is available depends on the operating system.
@end deffn

The following procedures either accept an object representing a broken down
time and return a selected component, or accept an object representing
a broken down time and a value and set the component to the value.
The numbers in parentheses give the usual range.

@table @code
@item tm:sec, set-tm:sec
Seconds (0-59).
@item tm:min, set-tm:min
Minutes (0-59).
@item tm:hour, set-tm:hour
Hours (0-23).
@item tm:mday, set-tm:mday
Day of the month (1-31).
@item tm:mon, set-tm:mon
Month (0-11).
@item tm:year, set-tm:year
Year (70-), the year minus 1900.
@item tm:wday, set-tm:wday
Day of the week (0-6) with Sunday represented as 0.
@item tm:yday, set-tm:yday
Day of the year (0-364, 365 in leap years).
@item tm:isdst, set-tm:isdst
Daylight saving indicator (0 for "no", greater than 0 for "yes", less than
0 for "unknown").
@item tm:gmtoff, set-tm:gmtoff
Time zone offset in seconds west of UTC (-46800 to 43200).
@item tm:zone, set-tm:zone
Time zone label (a string), not necessarily unique.
@end table

@c docstring begin (c-doc-string "stime.c" "localtime")
@c docstring md5 "2cd2c36738ad96121f1fd05b02a5f6c8"
@deffn primitive localtime time [zone]
Returns an object representing the broken down components of @var{time},
an integer like the one returned by @code{current-time}.  The time zone
for the calculation is optionally specified by @var{zone} (a string),
otherwise the @code{TZ} environment variable or the system default is
used.
@end deffn

@c docstring begin (c-doc-string "stime.c" "gmtime")
@c docstring md5 "b2cc512c9fdda6b204c6e69faa51696d"
@deffn primitive gmtime time
Returns an object representing the broken down components of @var{time},
an integer like the one returned by @code{current-time}.  The values
are calculated for UTC.
@end deffn

@c docstring begin (c-doc-string "stime.c" "mktime")
@c docstring md5 "b0a52e1fa300c648f6d42c3fc5a9741a"
@deffn primitive mktime sbd_time [zone]
@var{bd-time} is an object representing broken down time and @code{zone}
is an optional time zone specifier (otherwise the TZ environment variable
or the system default is used).

Returns a pair: the CAR is a corresponding
integer time value like that returned
by @code{current-time}; the CDR is a broken down time object, similar to
as @var{bd-time} but with normalized values.
@end deffn

@c docstring begin (c-doc-string "stime.c" "tzset")
@c docstring md5 "19a4fe747252c8d6acd0bd77966b1caa"
@deffn primitive tzset
Initialize the timezone from the TZ environment variable
or the system default.  It's not usually necessary to call this procedure
since it's done automatically by other procedures that depend on the
timezone.
@end deffn

@c docstring begin (c-doc-string "stime.c" "strftime")
@c docstring md5 "d48f88a920766a67d4c189d73c0b69be"
@deffn primitive strftime format stime
Formats a time specification @var{time} using @var{template}.  @var{time}
is an object with time components in the form returned by @code{localtime}
or @code{gmtime}.  @var{template} is a string which can include formatting
specifications introduced by a @code{%} character.  The formatting of
month and day names is dependent on the current locale.  The value returned
is the formatted string.
@xref{Formatting Date and Time, , , libc, The GNU C Library Reference Manual}.)
@end deffn

@c docstring begin (c-doc-string "stime.c" "strptime")
@c docstring md5 "661008b711878fa53539faa1a029642a"
@deffn primitive strptime format string
Performs the reverse action to @code{strftime}, parsing @var{string}
according to the specification supplied in @var{template}.  The
interpretation of month and day names is dependent on the current
locale.  The
value returned is a pair.  The CAR has an object with time components 
in the form returned by @code{localtime} or @code{gmtime},
but the time zone components
are not usefully set.
The CDR reports the number of characters from @var{string} which
were used for the conversion.
@end deffn

@defvar internal-time-units-per-second
The value of this variable is the number of time units per second
reported by the following procedures.
@end defvar

@c docstring begin (c-doc-string "stime.c" "times")
@c docstring md5 "b0aa01e543a9c263ece37ca05f7f84df"
@deffn primitive times
Returns an object with information about real and processor time.
The following procedures accept such an object as an argument and
return a selected component:

@table @code
@item tms:clock
The current real time, expressed as time units relative to an
arbitrary base.
@item tms:utime
The CPU time units used by the calling process.
@item tms:stime
The CPU time units used by the system on behalf of the calling process.
@item tms:cutime
The CPU time units used by terminated child processes of the calling
process, whose status has been collected (e.g., using @code{waitpid}).
@item tms:cstime
Similarly, the CPU times units used by the system on behalf of 
terminated child processes.
@end table
@end deffn

@c docstring begin (c-doc-string "stime.c" "get-internal-real-time")
@c docstring md5 "4f434d8279713973fdf950a0e18ce2d7"
@deffn primitive get-internal-real-time
Returns the number of time units since the interpreter was started.
@end deffn

@c docstring begin (c-doc-string "stime.c" "get-internal-run-time")
@c docstring md5 "2c97d4f310b90b5801d9174cc04b7a17"
@deffn primitive get-internal-run-time
Returns the number of time units of processor time used by the interpreter.
Both "system" and "user" time are included but subprocesses are not.
@end deffn

@node Runtime Environment
@section Runtime Environment

@c docstring begin (c-doc-string "feature.c" "program-arguments")
@c docstring md5 "3770213cd3f1159249731d0ac2ce36e1"
@deffn primitive program-arguments
@deffnx procedure command-line
Return the list of command line arguments passed to Guile, as a list of
strings.  The list includes the invoked program name, which is usually
@code{"guile"}, but excludes switches and parameters for command line
options like @code{-e} and @code{-l}.
@end deffn

@c docstring begin (c-doc-string "simpos.c" "getenv")
@c docstring md5 "30277e0b3c4bbd72385ae8681f22c3fc"
@deffn primitive getenv nam
Looks up the string @var{name} in the current environment.  The return
value is @code{#f} unless a string of the form @code{NAME=VALUE} is
found, in which case the string @code{VALUE} is returned.
@end deffn

@c begin (scm-doc-string "boot-9.scm" "setenv")
@deffn procedure setenv name value
Modifies the environment of the current process, which is
also the default environment inherited by child processes.

If @var{value} is @code{#f}, then @var{name} is removed from the
environment.  Otherwise, the string @var{name}=@var{value} is added
to the environment, replacing any existing string with name matching
@var{name}.

The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "environ")
@c docstring md5 "ad213dbcc3273ac1e90199dfc466932e"
@deffn primitive environ [env]
If @var{env} is omitted, returns the current environment as a list of strings.
Otherwise it sets the current environment, which is also the
default environment for child processes, to the supplied list of strings.
Each member of @var{env} should be of the form
@code{NAME=VALUE} and values of @code{NAME} should not be duplicated.
If @var{env} is supplied then the return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "putenv")
@c docstring md5 "3eeac174e2574ed521922f185e523fed"
@deffn primitive putenv str
Modifies the environment of the current process, which is
also the default environment inherited by child processes.

If @var{string} is of the form @code{NAME=VALUE} then it will be written
directly into the environment, replacing any existing environment string
with
name matching @code{NAME}.  If @var{string} does not contain an equal
sign, then any existing string with name matching @var{string} will
be removed.

The return value is unspecified.
@end deffn


@node Processes
@section Processes

@findex cd
@c docstring begin (c-doc-string "filesys.c" "chdir")
@c docstring md5 "2685497e5e67430a9883dbe608a75510"
@deffn primitive chdir str
Change the current working directory to @var{path}.
The return value is unspecified.
@end deffn

@findex pwd
@c docstring begin (c-doc-string "filesys.c" "getcwd")
@c docstring md5 "1484f4d06fb0bd01a2d643512ef56cfc"
@deffn primitive getcwd
Returns the name of the current working directory.
@end deffn

@c docstring begin (c-doc-string "filesys.c" "umask")
@c docstring md5 "13d23b48788b85e19cf645d70e41b7c2"
@deffn primitive umask [mode]
If @var{mode} is omitted, retuns a decimal number representing the current
file creation mask.  Otherwise the file creation mask is set to
@var{mode} and the previous value is returned.

E.g., @code{(umask #o022)} sets the mask to octal 22, decimal 18.
@end deffn

@c docstring begin (c-doc-string "posix.c" "getpid")
@c docstring md5 "d64b0376645a2061be247c643f452cb9"
@deffn primitive getpid
Returns an integer representing the current process ID.
@end deffn

@c docstring begin (c-doc-string "posix.c" "getgroups")
@c docstring md5 "d89f8836ad2d17963495d668c764a73f"
@deffn primitive getgroups
Returns a vector of integers representing the current supplimentary group IDs.
@end deffn

@c docstring begin (c-doc-string "posix.c" "getppid")
@c docstring md5 "0cdc7ef0d2c250329872db2b7098231f"
@deffn primitive getppid
Returns an integer representing the process ID of the parent process.
@end deffn

@c docstring begin (c-doc-string "posix.c" "getuid")
@c docstring md5 "628a0e80108003152f3d376c5ab3eaac"
@deffn primitive getuid
Returns an integer representing the current real user ID.
@end deffn

@c docstring begin (c-doc-string "posix.c" "getgid")
@c docstring md5 "45faad2fa3e5db9f71132fa04d33402f"
@deffn primitive getgid
Returns an integer representing the current real group ID.
@end deffn

@c docstring begin (c-doc-string "posix.c" "geteuid")
@c docstring md5 "87092a4dd6a394ace63c9295c19ab843"
@deffn primitive geteuid
Returns an integer representing the current effective user ID.
If the system does not support effective IDs, then the real ID
is returned.  @code{(feature? 'EIDs)} reports whether the system
supports effective IDs.
@end deffn

@c docstring begin (c-doc-string "posix.c" "getegid")
@c docstring md5 "bfc32b3275906666e8811e76bdf99cad"
@deffn primitive getegid
Returns an integer representing the current effective group ID.
If the system does not support effective IDs, then the real ID
is returned.  @code{(feature? 'EIDs)} reports whether the system
supports effective IDs.
@end deffn

@c docstring begin (c-doc-string "posix.c" "setuid")
@c docstring md5 "fa6f3d61ce1397155d101c2069b171c0"
@deffn primitive setuid id
Sets both the real and effective user IDs to the integer @var{id}, provided
the process has appropriate privileges.
The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "setgid")
@c docstring md5 "316a8122112a57369ab9d61729428743"
@deffn primitive setgid id
Sets both the real and effective group IDs to the integer @var{id}, provided
the process has appropriate privileges.
The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "seteuid")
@c docstring md5 "60e9495314eb531c1829fac934f3ad3c"
@deffn primitive seteuid id
Sets the effective user ID to the integer @var{id}, provided the process
has appropriate privileges.  If effective IDs are not supported, the
real ID is set instead -- @code{(feature? 'EIDs)} reports whether the
system supports effective IDs.
The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "setegid")
@c docstring md5 "8b73eeb128697b61a76866128ba57210"
@deffn primitive setegid id
Sets the effective group ID to the integer @var{id}, provided the process
has appropriate privileges.  If effective IDs are not supported, the
real ID is set instead -- @code{(feature? 'EIDs)} reports whether the
system supports effective IDs.
The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "getpgrp")
@c docstring md5 "8c78e5e22c15d0826c9faf29b1019877"
@deffn primitive getpgrp
Returns an integer representing the current process group ID.
This is the POSIX definition, not BSD.
@end deffn

@c docstring begin (c-doc-string "posix.c" "setpgid")
@c docstring md5 "b554c02ee5a2eb9dbacd35ff8213e54f"
@deffn primitive setpgid pid pgid
Move the process @var{pid} into the process group @var{pgid}.  @var{pid} or
@var{pgid} must be integers: they can be zero to indicate the ID of the
current process.
Fails on systems that do not support job control.
The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "posix.c" "setsid")
@c docstring md5 "0d7a41500edeeb36881d9a1dc9859d58"
@deffn primitive setsid
Creates a new session.  The current process becomes the session leader
and is put in a new process group.  The process will be detached
from its controlling terminal if it has one.
The return value is an integer representing the new process group ID.
@end deffn

@c docstring begin (c-doc-string "posix.c" "waitpid")
@c docstring md5 "7d85e72e16d275d85603b5411271f980"
@deffn primitive waitpid pid [options]
This procedure collects status information from a child process which
has terminated or (optionally) stopped.  Normally it will
suspend the calling process until this can be done.  If more than one
child process is eligible then one will be chosen by the operating system.

The value of @var{pid} determines the behaviour:

@table @r
@item @var{pid} greater than 0
Request status information from the specified child process.
@item @var{pid} equal to -1 or WAIT_ANY
Request status information for any child process.
@item @var{pid} equal to 0 or WAIT_MYPGRP
Request status information for any child process in the current process
group.
@item @var{pid} less than -1
Request status information for any child process whose process group ID
is -@var{PID}.
@end table

The @var{options} argument, if supplied, should be the bitwise OR of the
values of zero or more of the following variables:

@defvar WNOHANG
Return immediately even if there are no child processes to be collected.
@end defvar

@defvar WUNTRACED
Report status information for stopped processes as well as terminated
processes.
@end defvar

The return value is a pair containing:

@enumerate
@item
The process ID of the child process, or 0 if @code{WNOHANG} was
specified and no process was collected.
@item
The integer status value.
@end enumerate
@end deffn

The following three
functions can be used to decode the process status code returned
by @code{waitpid}.

@c docstring begin (c-doc-string "posix.c" "status:exit-val")
@c docstring md5 "df18364eb12231a4a0c93b295c630082"
@deffn primitive status:exit-val status
Returns the exit status value, as would be
set if a process ended normally through a
call to @code{exit} or @code{_exit}, if any, otherwise @code{#f}.
@end deffn

@c docstring begin (c-doc-string "posix.c" "status:term-sig")
@c docstring md5 "7f91f18c1c62586bb4f034f42efaffae"
@deffn primitive status:term-sig status
Returns the signal number which terminated the
process, if any, otherwise @code{#f}.
@end deffn

@c docstring begin (c-doc-string "posix.c" "status:stop-sig")
@c docstring md5 "633f8a62bb90a33cf87cd00930645733"
@deffn primitive status:stop-sig status
Returns the signal number which stopped the
process, if any, otherwise @code{#f}.
@end deffn

@c docstring begin (c-doc-string "simpos.c" "system")
@c docstring md5 "7c50840a0247c0bbfc1ac441f86a00c2"
@deffn primitive system [cmd]
Executes @var{cmd} using the operating system's "command processor".
Under Unix this is usually the default shell @code{sh}.  The value
returned is @var{cmd}'s exit status as returned by @code{waitpid}, which
can be interpreted using the functions above.

If @code{system} is called without arguments, it returns a boolean
indicating whether the command processor is available.
@end deffn

@c docstring begin (c-doc-string "simpos.c" "primitive-exit")
@c docstring md5 "57f4d6971bfc4b6ca0a9df4fc2c00d25"
@deffn primitive primitive-exit [status]
Terminate the current process without unwinding the Scheme stack.
This is would typically be useful after a fork.  The exit status
is @var{status} if supplied, otherwise zero.
@end deffn

@c docstring begin (c-doc-string "posix.c" "execl")
@c docstring md5 "cd0d489078f789de94be773713ecb674"
@deffn primitive execl filename . args
Executes the file named by @var{path} as a new process image.
The remaining arguments are supplied to the process; from a C program
they are accessable as the @code{argv} argument to @code{main}.
Conventionally the first @var{arg} is the same as @var{path}.
All arguments must be strings.  

If @var{arg} is missing, @var{path} is executed with a null
argument list, which may have system-dependent side-effects.

This procedure is currently implemented using the @code{execv} system
call, but we call it @code{execl} because of its Scheme calling interface.
@end deffn

@c docstring begin (c-doc-string "posix.c" "execlp")
@c docstring md5 "c3f02c5d2a9269ce276001169c94655e"
@deffn primitive execlp filename . args
Similar to @code{execl}, however if
@var{filename} does not contain a slash
then the file to execute will be located by searching the
directories listed in the @code{PATH} environment variable.

This procedure is currently implemented using the @code{execvp} system
call, but we call it @code{execlp} because of its Scheme calling interface.
@end deffn

@c docstring begin (c-doc-string "posix.c" "execle")
@c docstring md5 "d10c587e80f8ee6cff0592fbceeec910"
@deffn primitive execle filename env . args
Similar to @code{execl}, but the environment of the new process is
specified by @var{env}, which must be a list of strings as returned by the
@code{environ} procedure.

This procedure is currently implemented using the @code{execve} system
call, but we call it @code{execle} because of its Scheme calling interface.
@end deffn

@c docstring begin (c-doc-string "posix.c" "primitive-fork")
@c docstring md5 "eabfa452559e1470c613e80264e7044a"
@deffn primitive primitive-fork
Creates a new "child" process by duplicating the current "parent" process.
In the child the return value is 0.  In the parent the return value is
the integer process ID of the child.

This procedure has been renamed from @code{fork} to avoid a naming conflict
with the scsh fork.
@end deffn

@c docstring begin (c-doc-string "posix.c" "nice")
@c docstring md5 "51b6f142ac4d280e5202794c5833cce3"
@deffn primitive nice incr
Increment the priority of the current process by @var{incr}.  A higher
priority value means that the process runs less often.
The return value is unspecified.
@end deffn

@node Signals
@section Signals

Procedures to raise, handle and wait for signals.

@c docstring begin (c-doc-string "posix.c" "kill")
@c docstring md5 "89234a82ee49845eeb05e34ce0f3de1d"
@deffn primitive kill pid sig
Sends a signal to the specified process or group of processes.

@var{pid} specifies the processes to which the signal is sent:

@table @r
@item @var{pid} greater than 0
The process whose identifier is @var{pid}.
@item @var{pid} equal to 0
All processes in the current process group.
@item @var{pid} less than -1
The process group whose identifier is -@var{pid}
@item @var{pid} equal to -1
If the process is privileged, all processes except for some special
system processes.  Otherwise, all processes with the current effective
user ID.
@end table

@var{sig} should be specified using a variable corresponding to
the Unix symbolic name, e.g.,

@defvar SIGHUP
Hang-up signal.
@end defvar

@defvar SIGINT
Interrupt signal.
@end defvar
@end deffn

@c docstring begin (c-doc-string "scmsigs.c" "raise")
@c docstring md5 "34d64fd2e6c30628d87f1fbfe95529ba"
@deffn primitive raise sig

Sends a specified signal @var{sig} to the current process, where
@var{sig} is as described for the kill procedure.
@end deffn

@c docstring begin (c-doc-string "scmsigs.c" "sigaction")
@c docstring md5 "711e4020d3560c464f4d7389fd5a192b"
@deffn primitive sigaction signum [handler [flags]]
Install or report the signal handler for a specified signal.

@var{signum} is the signal number, which can be specified using the value
of variables such as @code{SIGINT}.

If @var{action} is omitted, @code{sigaction} returns a pair: the
CAR is the current
signal hander, which will be either an integer with the value @code{SIG_DFL}
(default action) or @code{SIG_IGN} (ignore), or the Scheme procedure which
handles the signal, or @code{#f} if a non-Scheme procedure handles the
signal.  The CDR contains the current @code{sigaction} flags for the handler.

If @var{action} is provided, it is installed as the new handler for
@var{signum}.  @var{action} can be a Scheme procedure taking one
argument, or the value of @code{SIG_DFL} (default action) or
@code{SIG_IGN} (ignore), or @code{#f} to restore whatever signal handler
was installed before @code{sigaction} was first used.  Flags can
optionally be specified for the new handler (@code{SA_RESTART} will
always be added if it's available and the system is using restartable
system calls.)  The return value is a pair with information about the
old handler as described above.

This interface does not provide access to the "signal blocking"
facility.  Maybe this is not needed, since the thread support may
provide solutions to the problem of consistent access to data
structures.
@end deffn

@c docstring begin (c-doc-string "scmsigs.c" "restore-signals")
@c docstring md5 "eddce6d08083df8e1b1e1db2085990a1"
@deffn primitive restore-signals
Return all signal handlers to the values they had before any call to
@code{sigaction} was made.  The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "scmsigs.c" "alarm")
@c docstring md5 "fb201fc65cdf59655d3e9fe4d56f5413"
@deffn primitive alarm i
Set a timer to raise a @code{SIGALRM} signal after the specified
number of seconds (an integer).  It's advisable to install a signal
handler for
@code{SIGALRM} beforehand, since the default action is to terminate
the process.

The return value indicates the time remaining for the previous alarm,
if any.  The new value replaces the previous alarm.  If there was
no previous alarm, the return value is zero.
@end deffn

@c docstring begin (c-doc-string "scmsigs.c" "pause")
@c docstring md5 "e7a27b324a4e166e8106ab72e3bf76d2"
@deffn primitive pause
Pause the current process (thread?) until a signal arrives whose
action is to either terminate the current process or invoke a
handler procedure.  The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "scmsigs.c" "sleep")
@c docstring md5 "29a83fb23c767777af8c568af52986f0"
@deffn primitive sleep i
Wait for the given number of seconds (an integer) or until a signal
arrives.  The return value is zero if the time elapses or the number
of seconds remaining otherwise.
@end deffn

@c docstring begin (c-doc-string "scmsigs.c" "usleep")
@c docstring md5 "b14fae046cbe4af8d61e44ef4b6c17b1"
@deffn primitive usleep i
Sleep for I microseconds.
`usleep' is not available on all platforms.
@end deffn

@node Terminals and Ptys
@section Terminals and Ptys

@c docstring begin (c-doc-string "ioext.c" "isatty?")
@c docstring md5 "1b2ffca3673bfbb1d10eb7acb8370467"
@deffn primitive isatty? port
Returns @code{#t} if @var{port} is using a serial
non-file device, otherwise @code{#f}.
@end deffn

@c docstring begin (c-doc-string "posix.c" "ttyname")
@c docstring md5 "769ec94e0f90139be8922437146e3709"
@deffn primitive ttyname port
Returns a string with the name of the serial terminal device underlying
@var{port}.
@end deffn

@c docstring begin (c-doc-string "posix.c" "ctermid")
@c docstring md5 "3fd556dfb560cb868465ec099c5d606a"
@deffn primitive ctermid
Returns a string containing the file name of the controlling terminal
for the current process.
@end deffn

@c docstring begin (c-doc-string "posix.c" "tcgetpgrp")
@c docstring md5 "dbcc77abaa96c964be12da405c8dabb3"
@deffn primitive tcgetpgrp port
Returns the process group ID of the foreground
process group associated with the terminal open on the file descriptor
underlying @var{port}.

If there is no foreground process group, the return value is a
number greater than 1 that does not match the process group ID
of any existing process group.  This can happen if all of the
processes in the job that was formerly the foreground job have
terminated, and no other job has yet been moved into the
foreground.
@end deffn

@c docstring begin (c-doc-string "posix.c" "tcsetpgrp")
@c docstring md5 "c09a1fa2ae2242c5c52aa775c98a7e60"
@deffn primitive tcsetpgrp port pgid
Set the foreground process group ID for the terminal used by the file
descriptor underlying @var{port} to the integer @var{pgid}.
The calling process
must be a member of the same session as @var{pgid} and must have the same
controlling terminal.  The return value is unspecified.
@end deffn

@node Pipes
@section Pipes

The following procedures provide an interface to the @code{popen} and 
@code{pclose} system routines.  The code is in a separate "popen"
module:

@smalllisp
(use-modules (ice-9 popen))
@end smalllisp

@findex popen
@deffn procedure open-pipe command modes
Executes the shell command @var{command} (a string) in a subprocess.
A pipe to the process is created and returned.  @var{modes} specifies
whether an input or output pipe to the process is created: it should 
be the value of @code{OPEN_READ} or @code{OPEN_WRITE}.
@end deffn

@deffn procedure open-input-pipe command
Equivalent to @code{(open-pipe command OPEN_READ)}.
@end deffn

@deffn procedure open-output-pipe command
Equivalent to @code{(open-pipe command OPEN_WRITE)}.
@end deffn

@findex pclose
@deffn procedure close-pipe port
Closes the pipe created by @code{open-pipe}, then waits for the process
to terminate and returns its status value, @xref{Processes, waitpid}, for
information on how to interpret this value.

@code{close-port} (@pxref{Generic Port Operations, close-port})
can also be used to
close a pipe, but doesn't return the status.
@end deffn

@node Networking
@section Networking

@menu
* Network Databases and Address Conversion::
* Network Sockets and Communication::
@end menu

@node Network Databases and Address Conversion
@subsection Network Databases and Address Conversion

This section describes procedures which convert internet addresses
and query various network databases.  Care should be taken when using
the database routines since they are not reentrant.

@subsubsection Address Conversion

@c docstring begin (c-doc-string "net_db.c" "inet-aton")
@c docstring md5 "a8f0bc778d0cf8be1c6935663e0095fc"
@deffn primitive inet-aton address
Converts a string containing an Internet host address in the traditional
dotted decimal notation into an integer.

@smalllisp
(inet-aton "127.0.0.1") @result{} 2130706433

@end smalllisp
@end deffn

@c docstring begin (c-doc-string "net_db.c" "inet-ntoa")
@c docstring md5 "4c53383e55ab10d2414b864d401c5727"
@deffn primitive inet-ntoa inetid
Converts an integer Internet host address into a string with the
traditional dotted decimal representation.

@smalllisp
(inet-ntoa 2130706433) @result{} "127.0.0.1"@end smalllisp
@end deffn

@c docstring begin (c-doc-string "net_db.c" "inet-netof")
@c docstring md5 "e581d05cbd37681c208c1dc725c24747"
@deffn primitive inet-netof address
Returns the network number part of the given integer Internet address.

@smalllisp
(inet-netof 2130706433) @result{} 127
@end smalllisp
@end deffn

@c docstring begin (c-doc-string "net_db.c" "inet-lnaof")
@c docstring md5 "6a95d1a178fdf8355e3db513bead6558"
@deffn primitive inet-lnaof address
Returns the local-address-with-network part of the given Internet
address.

@smalllisp
(inet-lnaof 2130706433) @result{} 1
@end smalllisp
@end deffn

@c docstring begin (c-doc-string "net_db.c" "inet-makeaddr")
@c docstring md5 "95472f652402e6b02cf659de5b80785f"
@deffn primitive inet-makeaddr net lna
Makes an Internet host address by combining the network number @var{net}
with the local-address-within-network number @var{lna}.

@smalllisp
(inet-makeaddr 127 1) @result{} 2130706433
@end smalllisp
@end deffn

@subsubsection The Host Database

A @dfn{host object} is a structure that represents what is known about a
network host, and is the usual way of representing a system's network
identity inside software.

The following functions accept a host object and return a selected
component:

@deffn procedure hostent:name host
The "official" hostname for @var{host}.
@end deffn
@deffn procedure hostent:aliases host
A list of aliases for @var{host}.
@end deffn
@deffn procedure hostent:addrtype host
The host address type.  For hosts with Internet addresses, this will
return @code{AF_INET}.
@end deffn
@deffn procedure hostent:length host
The length of each address for @var{host}, in bytes.
@end deffn
@deffn procedure hostent:addr-list host
The list of network addresses associated with @var{host}.
@end deffn

The following procedures are used to search the host database:

@c docstring begin (c-doc-string "net_db.c" "gethost")
@c docstring md5 "a3404f167c6f690968b6fd6868d2c927"
@deffn primitive gethost [host]
@deffnx procedure gethostbyname hostname
@deffnx procedure gethostbyaddr address
Look up a host by name or address, returning a host object.  The
@code{gethost} procedure will accept either a string name or an integer
address; if given no arguments, it behaves like @code{gethostent} (see
below).  If a name or address is supplied but the address can not be
found, an error will be thrown to one of the keys:
@code{host-not-found}, @code{try-again}, @code{no-recovery} or
@code{no-data}, corresponding to the equivalent @code{h_error} values.
Unusual conditions may result in errors thrown to the
@code{system-error} or @code{misc_error} keys.
@end deffn

The following procedures may be used to step through the host
database from beginning to end.

@deffn procedure sethostent [stayopen]
Initialize an internal stream from which host objects may be read.  This
procedure must be called before any calls to @code{gethostent}, and may
also be called afterward to reset the host entry stream.  If 
@var{stayopen} is supplied and is not @code{#f}, the database is not
closed by subsequent @code{gethostbyname} or @code{gethostbyaddr} calls,
possibly giving an efficiency gain.
@end deffn

@deffn procedure gethostent
Return the next host object from the host database, or @code{#f} if
there are no more hosts to be found (or an error has been encountered).
This procedure may not be used before @code{sethostent} has been called.
@end deffn

@deffn procedure endhostent
Close the stream used by @code{gethostent}.  The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "net_db.c" "sethost")
@c docstring md5 "fe5859cf2f433aa294dc21fb024758d5"
@deffn primitive sethost [stayopen]
If @var{stayopen} is omitted, this is equivalent to @code{endhostent}.
Otherwise it is equivalent to @code{sethostent stayopen}.
@end deffn
@subsubsection The Network Database

The following functions accept an object representing a network
and return a selected component:

@deffn procedure netent:name net
The "official" network name.
@end deffn
@deffn procedure netent:aliases net
A list of aliases for the network.
@end deffn
@deffn procedure netent:addrtype net
The type of the network number.  Currently, this returns only
@code{AF_INET}.
@end deffn
@deffn procedure netent:net net
The network number.
@end deffn

The following procedures are used to search the network database:

@c docstring begin (c-doc-string "net_db.c" "getnet")
@c docstring md5 "90766cd966150d87361355dc54ea441a"
@deffn primitive getnet [net]
@deffnx procedure getnetbyname net-name
@deffnx procedure getnetbyaddr net-number
Look up a network by name or net number in the network database.  The
@var{net-name} argument must be a string, and the @var{net-number}
argument must be an integer.  @code{getnet} will accept either type of
argument, behaving like @code{getnetent} (see below) if no arguments are
given.
@end deffn

The following procedures may be used to step through the network
database from beginning to end.

@deffn procedure setnetent [stayopen]
Initialize an internal stream from which network objects may be read.  This
procedure must be called before any calls to @code{getnetent}, and may
also be called afterward to reset the net entry stream.  If 
@var{stayopen} is supplied and is not @code{#f}, the database is not
closed by subsequent @code{getnetbyname} or @code{getnetbyaddr} calls,
possibly giving an efficiency gain.
@end deffn

@deffn procedure getnetent
Return the next entry from the network database.
@end deffn

@deffn procedure endnetent
Close the stream used by @code{getnetent}.  The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "net_db.c" "setnet")
@c docstring md5 "3c799404c874fdcf64dc90c6edf58475"
@deffn primitive setnet [stayopen]
If @var{stayopen} is omitted, this is equivalent to @code{endnetent}.
Otherwise it is equivalent to @code{setnetent stayopen}.
@end deffn

@subsubsection The Protocol Database

The following functions accept an object representing a protocol
and return a selected component:

@deffn procedure protoent:name protocol
The "official" protocol name.
@end deffn
@deffn procedure protoent:aliases protocol
A list of aliases for the protocol.
@end deffn
@deffn procedure protoent:proto protocol
The protocol number.
@end deffn

The following procedures are used to search the protocol database:

@c docstring begin (c-doc-string "net_db.c" "getproto")
@c docstring md5 "fc2a312858c9fac717c4d3e7aeb3a8ae"
@deffn primitive getproto [protocol]
@deffnx procedure getprotobyname name
@deffnx procedure getprotobynumber number
Look up a network protocol by name or by number.  @code{getprotobyname}
takes a string argument, and @code{getprotobynumber} takes an integer
argument.  @code{getproto} will accept either type, behaving like
@code{getprotoent} (see below) if no arguments are supplied.
@end deffn

The following procedures may be used to step through the protocol
database from beginning to end.

@deffn procedure setprotoent [stayopen]
Initialize an internal stream from which protocol objects may be read.  This
procedure must be called before any calls to @code{getprotoent}, and may
also be called afterward to reset the protocol entry stream.  If 
@var{stayopen} is supplied and is not @code{#f}, the database is not
closed by subsequent @code{getprotobyname} or @code{getprotobynumber} calls,
possibly giving an efficiency gain.
@end deffn

@deffn procedure getprotoent
Return the next entry from the protocol database.
@end deffn

@deffn procedure endprotoent
Close the stream used by @code{getprotoent}.  The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "net_db.c" "setproto")
@c docstring md5 "a6d4e36df0f2369cf600db462882c867"
@deffn primitive setproto [stayopen]
If @var{stayopen} is omitted, this is equivalent to @code{endprotoent}.
Otherwise it is equivalent to @code{setprotoent stayopen}.
@end deffn

@subsubsection The Service Database

The following functions accept an object representing a service
and return a selected component:

@deffn procedure servent:name serv
The "official" name of the network service.
@end deffn
@deffn procedure servent:aliases serv
A list of aliases for the network service. 
@end deffn
@deffn procedure servent:port serv
The Internet port used by the service.
@end deffn
@deffn procedure servent:proto serv
The protocol used by the service.  A service may be listed many times
in the database under different protocol names.
@end deffn

The following procedures are used to search the service database:

@c docstring begin (c-doc-string "net_db.c" "getserv")
@c docstring md5 "167798f1dcf2f83db97edea824eb9ff0"
@deffn primitive getserv [name [protocol]]
@deffnx procedure getservbyname name protocol
@deffnx procedure getservbyport port protocol
Look up a network service by name or by service number, and return a
network service object.  The @var{protocol} argument specifies the name
of the desired protocol; if the protocol found in the network service
database does not match this name, a system error is signalled.

The @code{getserv} procedure will take either a service name or number
as its first argument; if given no arguments, it behaves like
@code{getservent} (see below).
@end deffn

The following procedures may be used to step through the service
database from beginning to end.

@deffn procedure setservent [stayopen]
Initialize an internal stream from which service objects may be read.  This
procedure must be called before any calls to @code{getservent}, and may
also be called afterward to reset the service entry stream.  If 
@var{stayopen} is supplied and is not @code{#f}, the database is not
closed by subsequent @code{getservbyname} or @code{getservbyport} calls,
possibly giving an efficiency gain.
@end deffn

@deffn procedure getservent
Return the next entry from the services database.
@end deffn

@deffn procedure endservent
Close the stream used by @code{getservent}.  The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "net_db.c" "setserv")
@c docstring md5 "e33108541670434d076307d3a3ad4345"
@deffn primitive setserv [stayopen]
If @var{stayopen} is omitted, this is equivalent to @code{endservent}.
Otherwise it is equivalent to @code{setservent stayopen}.
@end deffn

@node Network Sockets and Communication
@subsection Network Sockets and Communication

Socket ports can be created using @code{socket} and @code{socketpair}. 
The ports are initially unbuffered, to
makes reading and writing to the same port more reliable.
A buffer can be added to the port using @code{setvbuf},
@xref{Ports and File Descriptors}.

The convention used for "host" vs "network" addresses is that addresses
are always held in host order at the Scheme level.  The procedures in
this section automatically convert between host and network order when
required.  The arguments and return values are thus in host order.

@c docstring begin (c-doc-string "socket.c" "socket")
@c docstring md5 "965daf176c8ac254b6cddc4934625264"
@deffn primitive socket family style proto
Returns a new socket port of the type specified by @var{family}, @var{style}
and @var{protocol}.  All three parameters are integers.  Typical values
for @var{family} are the values of @code{AF_UNIX}
and @code{AF_INET}.  Typical values for @var{style} are
the values of @code{SOCK_STREAM}, @code{SOCK_DGRAM} and @code{SOCK_RAW}.

@var{protocol} can be obtained from a protocol name using
@code{getprotobyname}.  A value of
zero specifies the default protocol, which is usually right.

A single socket port cannot by used for communication until
it has been connected to another socket.
@end deffn

@c docstring begin (c-doc-string "socket.c" "socketpair")
@c docstring md5 "ef9f03e6277e74fe68ea3b9a01a37815"
@deffn primitive socketpair family style proto
Returns a pair of connected (but unnamed) socket ports of the type specified
by @var{family}, @var{style} and @var{protocol}.
Many systems support only
socket pairs of the @code{AF_UNIX} family.  Zero is likely to be
the only meaningful value for @var{protocol}.
@end deffn

@c docstring begin (c-doc-string "socket.c" "getsockopt")
@c docstring md5 "e73f6a51446d47ced30b5e3f749ddc99"
@deffn primitive getsockopt sock level optname
Returns the value of a particular socket option for the socket
port @var{socket}.  @var{level} is an integer code for type of option
being requested, e.g., @code{SOL_SOCKET} for socket-level options.
@var{optname} is an
integer code for the option required and should be specified using one of
the symbols @code{SO_DEBUG}, @code{SO_REUSEADDR} etc.

The returned value is typically an integer but @code{SO_LINGER} returns a
pair of integers.
@end deffn

@c docstring begin (c-doc-string "socket.c" "setsockopt")
@c docstring md5 "e84af63ac4248fd180ce5b416d4e94f0"
@deffn primitive setsockopt sock level optname value
Sets the value of a particular socket option for the socket
port @var{socket}.  @var{level} is an integer code for type of option
being set, e.g., @code{SOL_SOCKET} for socket-level options.
@var{optname} is an
integer code for the option to set and should be specified using one of
the symbols @code{SO_DEBUG}, @code{SO_REUSEADDR} etc.
@var{value} is the value to which the option should be set.  For
most options this must be an integer, but for @code{SO_LINGER} it must
be a pair.

The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "socket.c" "shutdown")
@c docstring md5 "5732740941f750f78f6a8968e0ff2d60"
@deffn primitive shutdown sock how
Sockets can be closed simply by using @code{close-port}. The
@code{shutdown} procedure allows reception or tranmission on a
connection to be shut down individually, according to the parameter
@var{how}:

@table @asis
@item 0
Stop receiving data for this socket.  If further data arrives,  reject it.
@item 1
Stop trying to transmit data from this socket.  Discard any
data waiting to be sent.  Stop looking for acknowledgement of
data already sent; don't retransmit it if it is lost.
@item 2
Stop both reception and transmission.
@end table

The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "socket.c" "connect")
@c docstring md5 "3bd3faf268d08e8f7c806531ebd831d4"
@deffn primitive connect sock fam address . args
Initiates a connection from @var{socket} to the address
specified by @var{address} and possibly @var{arg @dots{}}.  The format
required for @var{address}
and @var{arg} @dots{} depends on the family of the socket.

For a socket of family @code{AF_UNIX},
only @code{address} is specified and must be a string with the
filename where the socket is to be created.

For a socket of family @code{AF_INET},
@code{address} must be an integer Internet host address and @var{arg} @dots{}
must be a single integer port number.

The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "socket.c" "bind")
@c docstring md5 "79e4fbd1add7b475192c5f9b096ea53e"
@deffn primitive bind sock fam address . args
Assigns an address to the socket port @var{socket}.
Generally this only needs to be done for server sockets,
so they know where to look for incoming connections.  A socket
without an address will be assigned one automatically when it
starts communicating.

The format of @var{address} and @var{ARG} @dots{} depends on the family
of the socket.

For a socket of family @code{AF_UNIX}, only @var{address}
is specified and must 
be a string with the filename where the socket is to be created.

For a socket of family @code{AF_INET}, @var{address} must be an integer
Internet host address and @var{arg} @dots{} must be a single integer
port number.

The values of the following variables can also be used for @var{address}:

@defvar INADDR_ANY
Allow connections from any address.
@end defvar

@defvar INADDR_LOOPBACK
The address of the local host using the loopback device.
@end defvar

@defvar INADDR_BROADCAST
The broadcast address on the local network.
@end defvar

@defvar INADDR_NONE
No address.
@end defvar

The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "socket.c" "listen")
@c docstring md5 "1e6d6047057201e563c89d0249643f12"
@deffn primitive listen sock backlog
This procedure enables @var{socket} to accept connection
requests.  @var{backlog} is an integer specifying
the maximum length of the queue for pending connections.
If the queue fills, new clients will fail to connect until the
server calls @code{accept} to accept a connection from the queue.

The return value is unspecified.
@end deffn

@c docstring begin (c-doc-string "socket.c" "accept")
@c docstring md5 "1aefc750ffb6a5bb46d9fa07c06bc740"
@deffn primitive accept sock
Accepts a connection on a bound, listening socket @var{socket}.  If there
are no pending connections in the queue, it waits until
one is available unless the non-blocking option has been set on the
socket.

The return value is a
pair in which the CAR is a new socket port for the connection and
the CDR is an object with address information about the client which
initiated the connection.

If the address is not available then the CDR will be an empty vector.

@var{socket} does not become part of the
connection and will continue to accept new requests.
@end deffn

The following functions take a socket address object, as returned
by @code{accept} and other procedures, and return a selected component.

@table @code
@item sockaddr:fam
The socket family, typically equal to the value of @code{AF_UNIX} or
@code{AF_INET}.
@item sockaddr:path
If the socket family is @code{AF_UNIX}, returns the path of the
filename the socket is based on.
@item sockaddr:addr
If the socket family is @code{AF_INET}, returns the Internet host
address.
@item sockaddr:port
If the socket family is @code{AF_INET}, returns the Internet port
number.
@end table

@c docstring begin (c-doc-string "socket.c" "getsockname")
@c docstring md5 "f205624ada648b4497f8152eed3680b7"
@deffn primitive getsockname sock
Returns the address of @var{socket}, in the same form as the object
returned by @code{accept}.  On many systems the address of a socket
in the @code{AF_FILE} namespace cannot be read.
@end deffn

@c docstring begin (c-doc-string "socket.c" "getpeername")
@c docstring md5 "2bc2e07bdc4aeb7234bcbb9b2c60492c"
@deffn primitive getpeername sock
Returns the address of the socket that the socket @var{socket} is connected to,
in the same form as the object
returned by @code{accept}.  On many systems the address of a socket
in the @code{AF_FILE} namespace cannot be read.
@end deffn

@c docstring begin (c-doc-string "socket.c" "recv!")
@c docstring md5 "6641b9492d91a8ed93b7a014573f7b7e"
@deffn primitive recv! sock buf [flags]
Receives data from the socket port @var{socket}.  @var{socket} must already
be bound to the address from which data is to be received.
@var{buf} is a string into which
the data will be written.  The size of @var{buf} limits the amount of
data which can be received: in the case of packet
protocols, if a packet larger than this limit is encountered then some data
will be irrevocably lost.

The optional @var{flags} argument is a value or
bitwise OR of MSG_OOB, MSG_PEEK, MSG_DONTROUTE etc.

The value returned is the number of bytes read from the socket.

Note that the data is read directly from the socket file descriptor:
any unread buffered port data is ignored.
@end deffn

@c docstring begin (c-doc-string "socket.c" "send")
@c docstring md5 "a730daa282f9da71cf70b3e0ace5aad6"
@deffn primitive send sock message [flags]
Transmits the string @var{message} on the socket port @var{socket}. 
@var{socket} must already be bound to a destination address.  The
value returned is the number of bytes transmitted -- it's possible for
this to be less than the length of @var{message} if the socket is
set to be non-blocking.  The optional @var{flags} argument is a value or
bitwise OR of MSG_OOB, MSG_PEEK, MSG_DONTROUTE etc.

Note that the data is written directly to the socket file descriptor:
any unflushed buffered port data is ignored.
@end deffn

@c docstring begin (c-doc-string "socket.c" "recvfrom!")
@c docstring md5 "35d7a3685b8e1381fb636ff7f932b435"
@deffn primitive recvfrom! sock buf [flags [start [end]]]
Returns data from the socket port @var{socket} and also information about
where the data was received from.  @var{socket} must already
be bound to the address from which data is to be received.
@code{buf}, is a string into which
the data will be written.  The size of @var{buf} limits the amount of
data which can be received: in the case of packet
protocols, if a packet larger than this limit is encountered then some data
will be irrevocably lost.

The optional @var{flags} argument is a value or
bitwise OR of MSG_OOB, MSG_PEEK, MSG_DONTROUTE etc.

The value returned is a pair: the CAR is the number of bytes read from
the socket and the CDR an address object in the same form as returned by
@code{accept}.

The @var{start} and @var{end} arguments specify a substring of @var{buf}
to which the data should be written.

Note that the data is read directly from the socket file descriptor:
any unread buffered port data is ignored.
@end deffn

@c docstring begin (c-doc-string "socket.c" "sendto")
@c docstring md5 "b3dd6558686046ac2ddaea96094f42c6"
@deffn primitive sendto sock message fam address . args_and_flags
Transmits the string @var{message} on the socket port @var{socket}.  The
destination address is specified using the @var{family}, @var{address} and
@var{arg} arguments, in a similar way to the @code{connect}
procedure.  The
value returned is the number of bytes transmitted -- it's possible for
this to be less than the length of @var{message} if the socket is
set to be non-blocking.  The optional @var{flags} argument is a value or
bitwise OR of MSG_OOB, MSG_PEEK, MSG_DONTROUTE etc.

Note that the data is written directly to the socket file descriptor:
any unflushed buffered port data is ignored.
@end deffn

The following functions can be used to convert short and long integers
between "host" and "network" order.  Although the procedures above do
this automatically for addresses, the conversion will still need to
be done when sending or receiving encoded integer data from the network.

@c docstring begin (c-doc-string "socket.c" "htons")
@c docstring md5 "4596612c4f4d3efcbc749a99cda1b6c0"
@deffn primitive htons in
Returns a new integer from @var{value} by converting from host to
network order. @var{value} must be within the range of a C unsigned
short integer.
@end deffn

@c docstring begin (c-doc-string "socket.c" "ntohs")
@c docstring md5 "6787f327922baea1a73a92cd8bfb4705"
@deffn primitive ntohs in
Returns a new integer from @var{value} by converting from network to
host order.  @var{value} must be within the range of a C unsigned short
integer.
@end deffn

@c docstring begin (c-doc-string "socket.c" "htonl")
@c docstring md5 "7eb14613b521f039a1e3e054b9a375c3"
@deffn primitive htonl in
Returns a new integer from @var{value} by converting from host to
network order. @var{value} must be within the range of a C unsigned
long integer.
@end deffn

@c docstring begin (c-doc-string "socket.c" "ntohl")
@c docstring md5 "e0a3274acc7b73c3f9cc5bda9006b925"
@deffn primitive ntohl in
Returns a new integer from @var{value} by converting from network to
host order. @var{value} must be within the range of a C unsigned
long integer.
@end deffn

These procedures are inconvenient to use at present, but consider:

@example
(define write-network-long
  (lambda (value port)
    (let ((v (make-uniform-vector 1 1 0)))
      (uniform-vector-set! v 0 (htonl value))
      (uniform-vector-write v port))))

(define read-network-long
  (lambda (port)
    (let ((v (make-uniform-vector 1 1 0)))
      (uniform-vector-read! v port)
      (ntohl (uniform-vector-ref v 0)))))
@end example

@node System Identification
@section System Identification

@c docstring begin (c-doc-string "posix.c" "uname")
@c docstring md5 "3c16496be65edfe89cabf2fc65c69c46"
@deffn primitive uname
Returns an object with some information about the computer system the
program is running on.
@end deffn

The following procedures accept an object as returned by @code{uname}
and return a selected component.

@table @code
@item utsname:sysname
The name of the operating system.
@item utsname:nodename
The network name of the computer.
@item utsname:release
The current release level of the operating system implementation.
@item utsname:version
The current version level within the release of the operating system.
@item utsname:machine
A description of the hardware.
@end table

@deffn primitive software-type
Return a symbol describing the current platform's operating system.
This may be one of AIX, VMS, UNIX, COHERENT, WINDOWS, MS-DOS, OS/2,
THINKC, AMIGA, ATARIST, MACH, or ACORN.

Note that most varieties of Unix are considered to be simply "UNIX".
That is because when a program depends on features that are not present
on every operating system, it is usually better to test for the presence
or absence of that specific feature.  The return value of
@code{software-type} should only be used for this purpose when there is
no other easy or unambiguous way of detecting such features.
@end deffn

@node Locales
@section Locales

@c docstring begin (c-doc-string "posix.c" "setlocale")
@c docstring md5 "46992e5988838154fce306044f430a60"
@deffn primitive setlocale category [locale]
If @var{locale} is omitted, returns the current value of the specified
locale category 
as a system-dependent string.
@var{category} should be specified using the values @code{LC_COLLATE},
@code{LC_ALL} etc.

Otherwise the specified locale category is set to
the string @var{locale}
and the new value is returned as a system-dependent string.  If @var{locale}
is an empty string, the locale will be set using envirionment variables.
@end deffn
