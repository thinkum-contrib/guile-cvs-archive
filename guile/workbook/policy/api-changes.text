This file records the apparent consensus of the active Guile
developers, as at January 2005, on handling API changes between
different versions of Guile.  For the context in which I proposed
this, see
http://lists.gnu.org/archive/html/guile-user/2005-01/msg00052.html and
other messages in the same thread.

- Neil Jerram <neil@ossau.uklinux.net>


1. We do _not_ regard it as an overriding aim to maintain C API
compatibility between Guile releases (that is, between versions w.x
and y.z where ((w != y) || (x != z))); we believe it is more important
to improve Guile's overall utility, which sometimes conflicts with
retaining API compatibility.

2. Consequently, the developer of a non-trivial Guile application must
in practice choose a particular Guile release and write their C code
according to that release's C API, and should expect _some_ work to be
required when enhancing their application to target a new Guile
release.

3. On the other hand, we will obviously not pointlessly change the C
API between releases, for at least four pragmatic reasons.

    - We don't want to annoy our users for no reason!

    - Any API change itself requires work by the core Guile developers.

    - The core Guile code uses its own APIs, so any unnecessary
      changes would require unnecessary work in Guile's own internals.

    - Most of the core Guile developers also write Guile applications,
      so any unnecessary changes would require unnecessary work in
      those applications as well.

4. Consequently the upgrade work mentioned in (2), while non-zero,
should always be as small as it could reasonably be.

5. Where possible, we will support the old C API, for the next one or
more releases, as a "deprecated" interface.  Guile's deprecation
infrastructure both highlights to the developer that they are using a
deprecated interface, and gives them a one-line hint as to what they
should be doing instead.

6. We will aim to document API changes completely.  The first point of
reference for this is usually the NEWS file in each new release.  Such
documentation may be imperfect in practice, but only for the same
reasons that make documentation in general imperfect.
