- Guile 1.4.2
  - abstract access to libguilereadline, libqthreads
    - write $w/modules/arch-survey.text [ttn]
    - write $w/modules/compiled-modules.text
  - integrate docs into distribution
  - write 1.4-HEAD compatibility header
  - determine/document policy on how/why/when of removing things
  - back port :select and :renamer interface
  - back port scripts/ and guile-tools
  - add user-hooks to module-system interface resolution
  - incorporate guile-rgx-ctax
  - support guile-doc-snarf
  - fix bugs


- Guile 1.6.1 (branched: only modify items according to ../build/release.txt)
  - call-with-output-string seg faults if its port is closed, eg.
       (call-with-output-string close-port)
    What should happen?  Should this be an error, or should it be
    possible to get the string out of a closed string port?
    [Same situation in the cvs head.]

- Guile 1.8.0

  - ice-9/ftw.scm problems:
    - stat-dir-readable?-proc decides the readability of a directory
      by looking at "stat" information, but does so imperfectly.  It
      doesn't take into account supplementary group memberships
      (getgroups), or that "root" can read anything, or access control
      lists (on systems which have those).  Just attempting an opendir
      would be simpler and more reliable.
    - visited?-proc tests only stat:ino, but this is not unique across
      filesystems, stat:dev must be used too.
    - Passing "/" to start from the root directory doesn't work, it
      looks like perhaps trailing slashes are stripped too agressively.

  - Fix srfi-1:  provide a list-copy function that can copy improper lists.
  - Finish and test GMP support for bignums.  If it works out, add it.
  - consider (and likely use) pkg-config for guile.
  - add support for srfi-30 (multi-line-comments) - follow std *carefully*.

  - Implement scm replacements for all of GH

    We used to have a second API, prefix gh_, that was meant to be
    easier to use than the native scm_ API and also portable across
    Scheme implementations.

    We decided that it is better to concentrate on making scm_ easier
    to use instead of having two APIs, which is confusing.

    However, we still have gh_ functions that have no direkt scm_
    counterpart.  We need to close that gap so that using the scm_ API
    instead of the gh_ API is just as easy.

  - Allow the deprecation mechanism to be controlled via a preprocessor
    macro analogous to _GNU_SOURCE. [talk to mvo about this]
  - Properly integrate system asyncs and signals with threads. [mvo]

  - Cleanup threading code and document it.  Especially the roles of
    the different APIs (C low level, Scheme, Plugin) [mvo, mikael]

  - Handle thread-local data in a better way.  Currently, there are
    three kinds of thread local data: get/setspecific keyed,
    root state and fluids.  Instead use only fluids (except possibly
    in the GC or low-level thread system).  Introduce a copy-on-write
    mechanism.  Remember to reset thread local data in futures.c!

  - Make (ice-9 format) thread safe.  Other modules as well.

  - Gracefully cope with the situation that gc_os_dep.c doesn't compile.

    This is some highly platform dependent code that regularily fails
    to compile as new versions of operating systems or new
    architectures appear.

    However, the services provided by gc_os_dep.c are optional.  So it
    would be good to just ignore it when it can't be compiled instead
    of letting the whole Guile build fail.

  - Make 1.8 backwards compatible again with 1.6. [mvo]

  - Investigate performance drop from Dec. 8, 2002 to Dec. 12, 2000.

- Eventually
  - port-line and port-column say they can return #f if the number is
    unknown, but the present code never does that.  Can this be
    dropped from the documenation, or is there a secret plan to use it
    one day?

  - ice-9/ftw.scm should use closedir explicitly, to conserve file
    descriptors.

  - hashx-remove!, corresponding to other hash*-remove! functions.

    scm_hashx_remove_x exists, but has never been documented, and
    might be non-functional (looks like it's missing "&closure" in the
    scm_hash_fn_remove_x call).

    Might want to think about the procedures taken.  Separate assoc
    and delete! suit existing such functions, but it's wasteful to
    traverse a bucket list once to see if an element exists, then
    again to delete it.  Think about maybe a function returning both a
    modified list and a flag indicating whether a delete was done.  Or
    maybe just returning the list tail of the target element.

  - mapping.scm hash-table-mapping-hooks uses hashx-create-handle,
    which doesn't exist.  Probably a typo for hashx-create-handle!,
    just wants to get a little test program to exercise it.
  - mapping.scm hash-table-mapping-hooks uses hashx-get-handle in its
    constructed delete-proc, which is probably meant to be
    hashx-remove!, if/when such a function exists.

  - in6addr_loopback made available as some sort of constant, like
    INADDR_LOOPBACK for ipv4.
  - in6addr_any made available as some sort of constant, like
    INADDR_ANY for ipv4.  Describe this under "bind" in the manual.

  - document the operation of the garbage collector (what's scanned, etc.)
  - add support for srfi-25 (multi-dimensional arrays).
    - How do we handle guile's existing support? srfi module overrides?
    - Should guile's support eventually be a separate module?
  - Look at new srfis (and add).
  + also show bidi set-difference counts in api-diff [ttn]
  - write goops test cases in C
  - scan ideas web page and link to implementations
    - "find"
    - determine others
  - move ideas web page data into workbook/ and generate the page
  + write ice-9/gap-buffer.scm [ttn]
  + write scripts/read-rfc822 [ttn]
  - use autoconf vars abs_top_* vars (but not w/ autoconf 2.53)
  - write render-bugs, add to mscripts or guile-tools [ttn]
  - scan mailing list archives for bugs and add them
    + subject: Guile fails tests on Tru64 4.0F [ttn]
    + subject: failed backtrace [ttn]
    + subject: All thread blocked on (accept socket) [ttn]
    + subject: avoid potential overflow in complex division [ttn]
    - by date
      - 2000-06 through 2001-06
      - 2001-07 through 2001-09 [ttn]
      - 2001-10 through 2001-12
      - 2002-01
      - 2002-02
      - 2002-03
      - 2002-04
  - write why-not-release? scanner
  - forward port guile-1.6.x stuff
    - guile-snarf and docs
    - determine rest of list
  - extend render-bugs to harvest (and run?) test cases
  - fix signal-handling + threading
    - remove GUILE_OLD_ASYNC_CLICK and friends
  - implement and integrate generational garbage collection
  - add POSIX thread support
  - factor thread support out of libguile
  - protect common resources using mutecis from the new interface
  - remove the dynamic roots
  - revise the fluid implementation
  - implement the GC thread synchronization (all threads: go to sleep!)
  - implementing the libguileposix threads glue library
  - write Orbit CORBA interface
  - use environments to implement low-level module obarray
  - specify role of shared object libraries in module system
  - move sort.c, random.c, etc out of libguile
  - include malloc debugging code in an optional file in libguile
  - fix looking up procedure names in environment in backtraces
  - implement srcprops using double cells
  - use "real" procprops
  - add facilities for easily debugging Scheme programs from Emacs
  - write good interface to Tk
  - write translators for additional languages
  - make GDB work with Guile
  - use the SCM trick of tagging environments with immediates (see m_letrec1)
    to convert source correctly in unmemocopy
  - eliminate argument checking for closures
  - Implement a thread-safe alternative to SCM's environment caches
  - develop better representation for GOOPS objects
  - rewrite GOOPS method cache management in C
  - rewrite GOOPS macros (define-class et al) in C
  - define GOOPS C API
  - make all syscalls block only the current thread, using scm_internal_select.
  - unify SRFI-4 and the existing uniform array code
  - rename ice-9 to something more obvious
  - implement implicitly shared substrings (thread-safe, copy on write).  In
    this context, the concept of read-only-strings might be re-introduced to
    implement the symbol->string semantics of R5RS.
  - implement internationalized strings
  - revise the uniform vector implementation
  - make the set of error signalling functions more consistent
  - Fix bug reported by Sven.Hartrumpf@fernuni-hagen.de 2001-08-31:
    (debug-disable 'debug) has no effect if it is the first form in ~/.guile.
  - provide a non-extended implementation of 'define' for the R5RS module.
  - write instructions on how to build Guile for distributors
  - publish (automated) build status matrix
  - write tests for each bug
  - test elisp translator against rfc822.el
  - provide doc snarfing
    - rationalize / integrate various scripts
    - document
    - re-enable install of constituent programs
  - make sure all *.scm have some commentary (including manual ref)
    - ice-9
    - oop
    + srfi [ttn]
    - lang
  - add DLL support [ela]
  - write emacs/patch.el
    + outgoing [ttn]
    - incoming [ttn]
  - Compile with --enable-error-on-warning without failure.  Requires a
    number of fixes, including num2integral.i.c and on some platforms
    gc_os_dep.c.  Also SCM_FIXABLE etc. will produce unavoidable
    warnings on some platforms with some vars as written now.  i.e. on
    alphas, SCM_FIXABLE(some_int) is always true.  We need more
    conditional compilation or similar.
  - remove deprecated function "feature?".
  - remove deprecated macros SCM_NEWCELL and SCM_NEWCELL2 together with
    their support staffing scm_deprecated_newcell,
    scm_deprecated_newcell2, scm_tc16_allocated, mark_allocated.
  - remove deprecated functions scm_must_malloc,
    scm_must_realloc, scm_must_free, scm_done_malloc, scm_done_free,
    scm_must_strndup, scm_must_strdup.
  - change return types of smob and port free functions to void


Patches:

#1 - fixes bug in libltdl 1.4.2d (and earlier)

--- ltdl.c~     Fri Apr 26 19:58:44 2002
+++ ltdl.c      Tue Jun 18 21:31:18 2002
@@ -2276,7 +2276,7 @@
      lt_ptr ignored;
 {
   lt_dlhandle  *handle = (lt_dlhandle *) data;
-  int          found   = access (filename, R_OK);
+  int          found   = !access (filename, F_OK);
 
   /* Bail out if file cannot be read...  */
   if (!found)



        Local Variables:
        mode: outline
        outline-regexp: "\\([ ][ ]\\)*[-+]"
        End:


[TODO ends here]
