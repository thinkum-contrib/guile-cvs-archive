-*-text-*-
In contrast to most of its sibling directories, this directory is
concerned with the enumeration and ownership of tasks, and the
conventional way of doing and communicating these things.


Parallel Development

	The whole idea behind all the process described below is to
	support organized parallel development where possible, w/ a
	minimum of duplicated work or "stepping on toes".

	The system is still being refined (please feel free to discuss
	on guile-devel mailing list).  Open questions:

	* What does it mean when someone claims a parent
	  task of an already claimed subtask?
	* What kind of dependency does this set up?
	* What is the proposed conflict resolution protocol?


The TODO File

	Items are grouped by target release version, most imminent
	first.  The last group is "Eventually", which is not associated
	w/ any particular version.  Items should be initially added to
	this group, and then later moved up under a version upon either
	ownership or sponsorship.

        NOTE: Do not add or remove items from a release specific
        section without authorization if that release has been
        branched in CVS -- see ../build/release.txt for details.

	Maintainers (w/ write privs) indicate ownership by `[USERNAME]'.
	Use `[ACTUAL-OWNER:MAINTAINER]' to indicate sponsorship, where
	both elements are usernames.  Actually, sponsorship is a form of
	review so MAINTAINER could be the start of a list of REVIEWERs,
	using ":" to separate.

	Upon completion, simply change the "-" to a "+", but do not
	delete the item.  At release time, the "+" entries will be
	deleted after review to make sure that user-visible changes are
	reflected in NEWS.

	During the time between ownership (sponsorship) and completion,
	a task is said to be work-in-progress.  If you wish to record
	some finer gradation of status, use one of these markers
	immediately following the "-":

	D -- design/discussion phase (i.e., "don't expect a checkin
	     or patch any time soon")

	X -- blocked on external dependency (for example, waiting for
	     paperwork, or profiling survey results)

	N% (N a number) -- N% "complete"

	R -- review requested (the task is done and you've asked for
	     some kind of (in)sanity check or review, for possible
	     redirection and followup)

	Feel free to define (and document above) additional markers.
	[Remember to maintain guile-core/scripts/summarize-guile-TODO.]

	Note that even though lots of things related to specific task
	are under discussion (for a long time in some cases), in the
	interests of promoting a clean TODO protocol, you should avoid
	setting "D" until actual ownership or sponsorship.


How Bugs Fit In

	Some tasks are related to fixing bugs.  Aside from "Eventually",
	each top-level has the general task "fix bugs".  When there is a
	new bug, it need only be added to the corresponding "fix bugs"
	header when it is deemed that the bug's non-resolution should
	block release (for that particular top-level).  That decision
	process is not documented here.


Requesting Review

	Sometimes after a change you'd like someone else to review your
	work for whatever reason.  Use the "R" flag to indicate this.
	The reviewer appends :REVIEWER to yours, and after the review
	either removes the "R" if everything's ok, or leaves it there,
	indicating further review requested.

	It's a good idea to get something out of the review more than
	mere approval.  "Peer review process" means different things to
	everyone, however, so try to cut slack in both directions.


Individual TODO Files

	Feel free to keep individual todo files either in this directory
	or under ../journal/ in any format under any discipline you want
	(or use the above conventions if you want to make use of scripts
	that grok the TODO file).

	Individual TODO files are useful if you want to break a task
	down into constituent subtasks, or (to go the other direction in
	scope) for long-running over-arching background tasks for which
	the main TODO file actually *IS* the breakdown (for example,
	"improve hacker coordination" or "make guile compiler-friendly
	again" or "practice my meager project manglement skills").

	Individual TODO files should not replace the TODO file for
	communicating intent to do some task (i.e., the Guile status
	summarization program only looks at the global TODO).
