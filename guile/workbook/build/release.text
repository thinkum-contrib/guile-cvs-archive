Releasing Guile
===============

* Index
  * Introduction
  * Policy
  * Names
  * Process
    * Deciding to release
    * Producing the release (the building and testing cycle)
    * Announcing the release
  * Volunteer Testers

* Introduction

  The release manager and the release management process should always
  try to be more a help than a hindrance, but in order to be able to
  make sure that we have quality releases, and that we get them out
  the door in a reasonable amount of time, the release manager has to
  have *some* authority with respect to a few issues.  As with all
  policy, it is likely true that "the *less* process we can have, the
  better" -- to paraphrase a famous quote -- "as simple as possible,
  but no simpler".

  Accordingly the Guile release policy will start small and be
  reworked as needed based on our experiences.  No one is going to be
  able to dream up the perfect system for this a-priori.

* Policy

  - The release manager will provide input to help decide when it
    might be time to branch for a release.  (Now that we have a more
    sophisticated bug tagging system, we won't normally branch until
    until all currently known release-critical issues have been
    resolved.  This should help limit the time between branch and
    release, which is in general a good idea.)

  - The release manager will handle creating the stable branch when
    finally deemed appropriate.

  - Once a release branch has been made, no one other than the release
    manager or a member of the Guile maintainer committee should check
    in changes to that branch without approval from the release
    manager, unless those fixes are for release critical bugs that
    they're supposed to be fixing -- where "supposed to be fixing"
    means that the release manager already knows about what they're
    doing, and "approval" doesn't have to be all that formal.  For
    example, popping up on irc, talking to the release manager and
    then posting to guile-devel that you're fixing "XZY" in the stable
    branch after consultation on IRC with the release manager, is just
    fine.

  - No one should modify entries in the workbook/tasks/TODO section
    for a branched stable release target, nor add/delete the
    corresponding bugs/* release-critical tags without the approval of
    the release manager.  Note that once we get to the point where we
    branch much more closely to the stable release, this shouldn't be
    a big issue.

  - workbook/tasks/TODO and a scan of workbook/bugs/* for the relevant
    release-critical tags should always provide a *complete* picture
    of what's holding up a release.  For those that don't have direct
    CVS access, please make sure you ask someone who does to edit TODO
    or bugs/* accordingly when appropriate.  (Eventually we will
    probably have a script that will automatically generate a list of
    the items holding up a release.)

  - whenever all the currently listed release TODO items and release
    critical bugs have been resolved (by whatever means), the release
    manager will build, upload and announce a pre-release beta.

  - If after a pre-release beta has been out for two weeks and no new
    agreed-upon release-critical issues arise, the release manager
    will build, upload, and announce the stable release.  If
    release-critical issues do arise, then at the release manager's
    discretion, fixing them may or may not require another beta
    pre-release (i.e. an endian fix might, but a minor documentation
    fix probably wouldn't).

  - The release manager will build, upload, and announce the stable
    release and manage future stable point releases.

* Names

  Maybe we should name Guile releases after entertaining poisons:
  absinthe, etc.  However, the first release containing the module
  system should be called Godot: "This is the one you've been waiting
  for."

* Process

  * Deciding to release

    As mentioned in Policy (above), one thing that should gate a
    release is whether or not all the release critical bugs and TODO
    items have been resolved.  A stable branch will not normally be
    made until then.

    However, there should be other criteria involved in deciding when
    to release, though sometimes it may be something as simple as a
    large number of accumulated bugfixes.

    Other possible reasons:

      - impending major changes to the development tree.
      - new and improved documentation.
      - major new features finished.

    In general, the TODO will be our record of what's planned for the
    next release (what must be done before then), and should be
    debated and updated accordingly after every major release.


  * Producing the release (the building and testing cycle)

    * Overview

      There are basically three phases to doing a release:

      - "BRANCHING": Creating a stable development branch in CVS.

      - "SPIFFING": Updating NEWS, README, INSTALL.  Running tests.
        Getting people to try builds on various machines.  Getting
        everything straightened up.

      - "PUNTING": Updating the version numbers.  Tagging the sources.
        Asking the FSF to put the disty on ftp.gnu.org.  Posting
        announcements.

      The "Spiffing" phase you might go through several times as you
      discover problems.  The "Branching" and "Punting" phases you do
      only once.

    * Branching

      Once it's been determined that it is time for a release (see
      "Deciding to release" above), here's what to do:

        - Announce when you're about to make the branch so that you
          have a greater chance of people holding off on edits during
          the short period while you're branching.

        - Make sure you're on the main trunk (see HACKING), and then
          create the branch-root tag.  i.e. -r
          branch-root_release-1-6.  (Add the exact command here next
          time I do it.)

        - Now create the branch with the branch tag. i.e. -r
          branch_release-1-6.  (Add exact command here next time I do
          it.)

        - Add a release specific section to workbook/tasks/TODO,
          if there's not one already, i.e. for Guile 1.6, we would
          have:

    Guile 1.6 (branched: only modify items according to ../build/release.txt)

          if the section already exists, just add the "(branched:
          ...)" notice.

        - Change the version numbers in GUILE-VERSION and README on
          the main branch to reflect the new unstable version
          i.e. 1.7.0, if you're currently creating the 1.6.X branch.

    * Spiffing (i.e. beta testing)

      NOTE: Unless you're *SURE* you know what you're doing, please
      perform the following actions in order.  The ordering is
      important in places.

      * Update the source.

        - Make sure you're working on the stable branch (see HACKING for
          details).  Note that after following the branch checklist
          above, you won't necessarily be.

        - Make sure you've got the latest files "cvs -qz3 update -Pd".

        - Check for files that have changed a lot, but do not have up-to-date
          copyright notices.  This can be as simple as doing:
            grep 'Copyright' * | grep -v 1999
          and looking for files you know you've worked on a lot.

        - Also, check the copyright years in "guile --version".

        - Make sure NEWS, INSTALL, AUTHORS and THANKS and the docs are
          up to date:
            - Scan the ChangeLogs for user-visible changes, marked with
              an asterisk at the left margin.
            - Update NEWS and the Texinfo documentation as appropriate.
            - Check for any [[incomplete]] sections of NEWS.
            - Fact-check INSTALL.
            - Make sure AUTHORS and THANKS are up-to-date (see also TODO).
            - Remove finished items from TODO (those marked w/ "+").

        - Make sure to edit NEWS so that you indicate the "breakpoint"
          for the new release -- i.e. add a "Changes since" line with
          content relevant to the version about to be released.

        - Make sure the downloading addresses and filenames in README
          are current.  (But don't bump the version number yet.  We do
          that below.)

        - Check that the versions of aclocal, automake, autoconf, and
          autoheader in your PATH match those given in HACKING.  Note
          that the `make dist' process always invokes these tools,
          even when all the generated files are up to date.  Make sure
          that the files in libltdl are generated using the same tools
          as the rest.

        - Check the library version numbers

          - Make sure the shared library libtool versioning numbers
            are correct, but first make sure you understand "Libtool's
            versioning system" in the libtool info pages.  Guile is
            going to be versioning it's shared libraries
            independently, so follow the libtool rules for choosing
            version numbers, but make sure to keep in mind that not
            everyone is as good about this as they should be.  In any
            case, note that if your library passes through data
            structures that were produced by some sub-library, and
            that sub-libraries data has changed in a publically
            incompatible way, then this may mean that *your* library's
            API has changed in a publically incompatible way.

          - In general, there will be a number of libraries in guile
            that will have to be versioned, and it would be best if
            the people who know the most about the individual libs
            decide what the apropriate CURRENT, REVISION, and AGE
            numbers for each one are.  In general, though, you have to
            be conservative.  If no one is sure that the libs are
            still compatible, then you *must* make the appropriate
            changes under the assumption that they're not.  Getting
            this wrong is very BAD(TM).

      * Build the beta test distribution

        NOTE: during this section, don't commit any of your changes to
        CVS until the instructions tell you to below.  This is
        important so that someone doesn't check out CVS and think that
        they have a finished copy of a particular release when they
        actually don't.

        - Run "make clean".

        - update GUILE-VERSION to reflect the current test
          distribution, but don't commit this change to CVS yet (see
          below).  For example, just before the 1.6.0 release, we went
          through some number of 1.5.X test releases.

        - Run ./autogen.sh to rebuild all generated files in the source tree.

        - configure the source tree for build in the same tree with
          these configuration options: --enable-maintainer-mode \
          --enable-debug-malloc --with-threads \
          --enable-error-on-warning \
          --prefix=/wherever/you/want

        - Build the tree.  (If the above two steps are not done first,
          the dependencies won't be properly included in the generated
          Makefile.in files.)

        - Run "make" and "make check".

        - Check that the version numbers mentioned in the manual and
          in the output of "guile --version" are the right ones.

        - Run "make distcheck".

      * Test the beta release candidate tarfile.

        - Unset GUILE_LOAD_PATH.

        - Remove automake and autoconf from your path, or turn off
          their execute bits, or something.  (Users must be able to
          build from the tarfile without installing those tools.)  As
          an example, you could disable the tools during the test like
          so:

            mkdir /tmp/stub
            cat > /tmp/stub/do-nothing <<EOF
            #!/bin/sh
            echo warning: $0 called
            sleep 10
            exit 0
            EOF
            chmod +x /tmp/stub/do-nothing
            ln /tmp/stub/do-nothing /tmp/stub/automake
            ln /tmp/stub/do-nothing /tmp/stub/autoconf	# etc
            PATH=/tmp/stub:$PATH

        - Configure, "make", "make check", and "make install".  Make
          sure to remove your previous install tree before the "make
          install".

        - Make sure LD_LIBRARY_PATH doesn't include anything
          unnecessary -- though at the moment it (or
          LTDL_LIBRARY_PATH) will need to include guile's lib
          directory if that directory is not already in the normal
          places libltdl looks.

        - Run the test suite on the installed version.
            ./check-guile -i [INSTALL_PATH]/bin/guile

        - Look at the install tree (with "find | sort" or similar) and
          make sure nothing seems obviously amiss.

        - Make sure readline works.

        - You might try the example code in the doc directory.

      * Update CVS and tag the beta release.

        When you get a tarfile that checks out OK.

        - Add a "Guile beta N.M
          released." entry to the top-level ChangeLog.

        - Now commit all your changes to CVS (this will also commit
          the new GUILE-VERSION).

        - Tag the release "cvs tag release_1-5-2".

        - Run 'make distcheck' again to get the official tarfile.

        - Upload the tarfile.

        - Update the News on www.guile.org.

        - Announce the beta release in the places appropriate for a
          beta test (fixme: elaborate -- i.e. guile-user, guile-devel,
          etc., and put a sample beta release msg somewhere).  The
          testers should follow the same instructions under "Test the
          beta release candidate tarfile" above.

      * Decide if we're ready for the final release

        If after two weeks, no new agreed upon release critical issues
        have surfaced, proceed to "Punting" below, otherwise fix the
        issues, and return to "Spiffing" above.

    * Punting (the final stable release)

      - Make the final update to the version numbers in GUILE-VERSION
        and README.  (There are many places in README that need
        updating!).  See HACKING for more information on how the
        version numbers are to be chosen.

      - Add a "Guile X.Y.Z released." entry to the top-level
        ChangeLog.

      - Now commit all your changes to CVS.

      - Tag the entire source tree with a tag of the form "release_X-Y-Z",
        i.e for release 1.6.1, use release_1-6-1

      - Do a 'make distcheck' to get the final tarfile.

      - Upload the tarfile to gnudist.gnu.org:~ftp/pub/gnu/guile and
        check the permissions.

  * Announcing the release

    - Send an announcement message to gnu-announce@gnu.org,
      guile-user@gnu.org, and guile-devel@gnu.org.  See the list
      archives for announcement examples.

    - Update the news on www.guile.org.

        - cd template
        - edit news.html
        - make singlefile=news.html one-no-commit
        - check ../news.html with your favorite browser.
        - commit changes from ../

    - Change the topic on irc.freenode.net #guile.
        /msg chanserv op #guile
        /topic FOO
        /deop NICK

* Volunteer Testers

  For test builds:

  SunOS (gcc and pcc) --- galapas.ai.mit.edu
  Solaris (gcc and SUN cc) --- saturn.ai.mit.edu
  NetBSD (gcc) --- repo-man.ai.mit.edu (use /home/repo/jimb)
  HP/UX (gcc, HP cc) --- nutrimat.gnu.ai.mit.edu

  These gentlemen have kindly offered to do pre-release testing:

  Tom Tromey <tromey@cygnus.com>:

    alphaev5-unknown-linux-gnu
    hppa1.1-hp-hpux10.20
    hppa1.1-hp-hpux11.00
    mips-sgi-irix5.3
    powerpc-ibm-aix4.2.0.0
    powerpc-unknown-linux-gnu
    sparc-sun-solaris2.6
    i686-pc-linux-gnu
    mips-sgi-irix6.3
    sparc-sun-sunos4.1.4

  Perry Metzger <perry@piermont.com>

    NetBSD

-- 
Local Variables:
mode: outline
outline-regexp: "[ ]*[*] "
End:
