summary: dynamic-link can not request a specific interface number
reported: Rob Browning <rlb@defaultvalue.org>, 2001
affects: HEAD branch_release-1-6 branch_release-1-4
assigned: Rob Browning <rlb@defaultvalue.org>, 2002-03-25

When loading a shared library with dynamic-link (or indirectly via
load-extension), you can not specify an interface number.  You will
get whatever has been installed most recently, which might not be what
is appropriate.

Specifically, when 1.6 is released, its libguilereadline.la or
libguilereadline.so will probably shadow the libguilereadline.la or
libguilereadline.so of an already installed 1.4.  Guile 1.4 will then
erroneously load 1.6's libguilereadline and will likely crash.

To fix this, we need to

1) make sure that 1.4 will not accidentally find one of 1.6's shared libraries.

2) fix dynamic-link to accept a interface number to avoid this problem
   more cleanly in the future.

With respect to (1)

  We can fix this by renaming all shared libraries to include the
  current interface number (i.e. libguilereadline-15) and needs to be
  done before 1.6 is released.  2) is harder to do and should be
  deferred to 1.8.

  [This has been fixed in 1.6 -- each lib includes the full libtool
  info in the name i.e. libfoo-bar-lt-X-Y-Z.so.  This allows us to
  autogenerate the names and makes sure it's painfully clear what's
  going on here.  In 1.8 we're planning to do something much better.]

With respect to (2)

  Current assumptions (though likely open to debate):

  (1) Guile shared libs, even ones supporting modules may need to be
      directly linked into applications via -l.  For example, if you
      want to call scm_make_u8vector from srfi-4 in your scheme code,
      you will need to be able to "-l link" against
      libguile-srfi-srfi-4 (or whatever lib contains that function).
      This requirement places certain restrictions on the possible
      solutions we might design.

  A proposal:

  (1) Write our own lt_dlopen(char *name, unsigned int interface)
      which will DTRT, when called like this

        scm_lt_dlopen("libfoo", 12)

      How we can do this will depend in part on how libltdl works, but
      if at all possible, we should probably try to use the same
      algorithm to choose the appropriate shared lib from the
      available X.Y.Z library versions that ldso does for normal
      dynamically linked (not dlopend) libs.

      One fairly simple possibility that *might* work, would be to
      require that all guile shared libs install a versioned .la file,
      perhaps by copying the build-time libfoo.la to libfoo.la.X.Y.Z
      or similar.  Then our scm_lt_dlopen function would use the
      interface number, and ltdl's * exact* algorithm to find a suitable
      .la.* file and directly lt_dlopen that.

  (2) Provide a scheme level interface that allows you to ask for a
      particular interface, something like (some-link-func
      "libguile-foo" 3) and uses scm_lt_dlopen to make sure you get
      the right lib.

  (3) Once we're finished with (1), see if the ltdl people are
      interested.

  (4) Whatever we do, we should still allow people to call lt_dlopen
      directly if they want to -- we'd provide this as part of a
      "lower-level" linker interface.

Local Variables:
mode: text
End:
