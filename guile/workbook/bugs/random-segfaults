summary: a couple things that segfault instead of giving an error
reported: Bill Schottstaedt <bil@ccrma.Stanford.EDU>, 2003-05-31
affects: HEAD branch_release-1-6

Here are some ways to get guile 1.6.4 (and 1.7.0 I think)
to segfault or go into an infinite loop:


guile> (array-in-bounds? 1.5)
Program received signal SIGSEGV, Segmentation fault.
scm_array_in_bounds_p (v=0x7f, args=0x2974) at unif.c:1023
1023      switch SCM_TYP7 (v)


guile> (error-catching-loop 1.5)
ERROR: Wrong type to apply: 1.5
ABORT: (misc-error)
ERROR: Wrong type to apply: 1.5
ABORT: (misc-error)
ERROR: Wrong type to apply: 1.5
(etc -- infinite loop -- similar for other args such as "str")

(error-catching-repl 1.5 1.5 1.5)
ERROR: Wrong type to apply: 1.5
ABORT: (misc-error)
-> same infinite loop



guile> (destroy-guardian! 1234)
Program received signal SIGSEGV, Segmentation fault.
scm_destroy_guardian_x (guardian=0x134a) at guardians.c:394
394       guardian_t *g = GUARDIAN (guardian);


guile> (guardian-destroyed? 1234)
Program received signal SIGSEGV, Segmentation fault.
0x4005210b in scm_guardian_destroyed_p (guardian=0x134a) at guardians.c:370
370       res = SCM_BOOL (DESTROYED_P (GUARDIAN (guardian)));


guile> (guardian-greedy? 1234)
Program received signal SIGSEGV, Segmentation fault.
0x40052136 in scm_guardian_greedy_p (guardian=0x134a) at guardians.c:383
383       return SCM_BOOL (GREEDY_P (GUARDIAN (guardian)));


guile> (env-module (sqrt -1))
Program received signal SIGSEGV, Segmentation fault.
0x40057ef5 in scm_env_top_level (env=0x8097b10) at modules.c:225
225           if (!SCM_CONSP (SCM_CAR (env))

guile> (env-module (make-vector 0))
Program received signal SIGSEGV, Segmentation fault.
scm_env_top_level (env=0x0) at modules.c:225
225           if (!SCM_CONSP (SCM_CAR (env))


guile> (class-of 1.5)
Program received signal SIGSEGV, Segmentation fault.
0x4006162e in scm_class_of (x=0x8084f40) at objects.c:161
161                   return scm_smob_class[SCM_TC2SMOBNUM (type)];

guile> (class-of "hi")
Program received signal SIGSEGV, Segmentation fault.
0x40043a61 in scm_deval (x=0x4014d658, env=0x4014d5f0) at eval.c:2549
2549                if (SCM_VALUESP (t.arg1))
(etc -- other types cause the same problem)


wrong error message?:
guile> (list->symbol 1.5 1.5)
ERROR: Wrong number of arguments to #<primitive-procedure list->string>
ABORT: (wrong-number-of-args)


guile> (enclose-array "hi" 1234)
Program received signal SIGSEGV, Segmentation fault.
0x4007f138 in scm_enclose_array (ra=0x8097b18, axes=0x4014cf20) at unif.c:981
981           SCM_ARRAY_DIMS (ra_inr)[k].inc = s[j].inc;


guile> (dynamic-call 1234 1.5)
Program received signal SIGSEGV, Segmentation fault.
0x000004d2 in ?? ()

guile> (dynamic-args-call 1234 1.5 '())
Program received signal SIGSEGV, Segmentation fault.
0x000004d2 in ?? ()


guile> (list->array -1 '())
-> infinite loop?


guile> (restricted-vector-sort! '#(1 0) 1.5 1 0)
Program received signal SIGSEGV, Segmentation fault.
0x4006dffb in applyless (less=0x8084f40, a=0x88097b10, b=0x88097b10)
    at sort.c:387
387       return SCM_NFALSEP (scm_call_2 (less, *(SCM *) a, *(SCM *) b));


guile> (make-uniform-array #t 1234 1234 1234 (list 0 1))
Program received signal SIGSEGV, Segmentation fault.
0x4007a0e9 in scm_array_fill_int (ra=0x40154340, fill=0x2374, ignore=0x2974)
    at ramap.c:527
527                       ve[i] = ~0L;

