summary: make check fails on Tru64 4.0F
reported: David C Sterratt <david.c.sterratt@ed.ac.uk>, 2002-02-08
affects: branch_release-1-6

David C Sterratt sez:
> Here's what I see when using ./check-guile
> --debug at the end:
>
> Totals for this test run:
> passes:                 2079
> failures:               7
> unexpected passes:      0
> expected failures:      17
> unresolved test cases:  0
> untested test cases:    0
> unsupported test cases: 9
> errors:                 30
>
> Here's the full output:
>
> Testing libguile/guile ... --debug
> with GUILE_LOAD_PATH=.:./test-suite
> with LTDL_LIBRARY_PATH=/home/data10/dcs/src/guile/guile-core-20020205/srfi:
> ;;; loading ./test-suite/tests/alist.test
> ;;; loading ./test-suite/tests/bit-operations.test
> ;;; loading ./ice-9/documentation.scm
> ;;; loading ./test-suite/tests/c-api.test
> ;;; loading ./test-suite/tests/chars.test
> ;;; loading ./test-suite/tests/common-list.test
> ;;; loading ./test-suite/tests/environments.test
> ;;; loading ./test-suite/tests/eval.test
> ;;; loading ./test-suite/tests/exceptions.test
> ;;; loading ./test-suite/tests/format.test
> ;;; loading ./ice-9/format.scm
> ;;; loading ./test-suite/tests/gc.test
> ;;; loading ./test-suite/tests/getopt-long.test
> ;;; loading ./test-suite/tests/goops.test
> ;;; loading ./oop/goops.scm
> ;;; loading ./oop/goops/util.scm
> ;;; loading ./oop/goops/dispatch.scm
> ;;; loading ./oop/goops/compile.scm
> ;;; loading ./test-suite/tests/guardians.test
> ;;; loading ./test-suite/tests/hooks.test
> ;;; loading ./test-suite/tests/import.test
> ;;; loading ./test-suite/tests/interp.test
> ;;; loading ./test-suite/tests/list.test
> ;;; loading ./test-suite/tests/load.test
> ;;; loading ./test-suite/tests/numbers.test
> ;;; loading ./test-suite/tests/optargs.test
> ;;; loading ./ice-9/optargs.scm
> ;;; loading ./test-suite/tests/ports.test
> ;;; loading ./ice-9/popen.scm
> ;;; loading ./test-suite/tests/r4rs.test
> ;;; loading /home/data10/dcs/src/guile/guile-core-20020205/tmp1
> ;;; loading ./test-suite/tests/reader.test
> ;;; loading ./test-suite/tests/regexp.test
> ;;; loading ./test-suite/tests/srfi-10.test
> ;;; loading ./srfi/srfi-10.scm
> ;;; loading ./test-suite/tests/srfi-13.test
> ;;; loading ./srfi/srfi-13.scm
> ;;; loading ./srfi/srfi-14.scm
> ;;; loading ./test-suite/tests/srfi-14.test
> ;;; loading ./test-suite/tests/srfi-19.test
> ;;; loading ./srfi/srfi-19.scm
> ;;; loading ./srfi/srfi-6.scm
> ;;; loading ./srfi/srfi-8.scm
> ;;; loading ./ice-9/receive.scm
> ;;; loading ./srfi/srfi-9.scm
> ;;; loading ./test-suite/tests/srfi-4.test
> ;;; loading ./srfi/srfi-4.scm
> ;;; loading ./test-suite/tests/srfi-9.test
> ;;; loading ./test-suite/tests/strings.test
> ;;; loading ./test-suite/tests/symbols.test
> ;;; loading ./test-suite/tests/syncase.test
> ;;; loading ./ice-9/syncase.scm
> ;;; loading ./ice-9/debug.scm
> ;;; loading ./ice-9/psyntax.pp
> ;;; loading ./test-suite/tests/syntax.test
> ;;; loading ./test-suite/tests/time.test
> ;;; loading ./test-suite/tests/version.test
> ;;; loading ./test-suite/tests/weaks.test
> (. ./test-suite /usr/local/share/guile/site /usr/local/share/guile/1.5.4 /usr/local/share/guile .)
> FAIL: srfi-19.test: SRFI date/time library: #<procedure time-utc->date (time . tz-offset)> respects local DST if no TZ-OFFSET given
> FAIL: srfi-19.test: SRFI date/time library: #<procedure time-tai->date (time . tz-offset)> respects local DST if no TZ-OFFSET given
> FAIL: srfi-19.test: SRFI date/time library: #<procedure time-monotonic->date (time . tz-offset)> respects local DST if no TZ-OFFSET given
> FAIL: srfi-19.test: SRFI date/time library: #<procedure julian-day->date (jdn . tz-offset)> respects local DST if no TZ-OFFSET given
> FAIL: srfi-19.test: SRFI date/time library: #<procedure modified-julian-day->date (jdn . tz-offset)> respects local DST if no TZ-OFFSET given
> FAIL: srfi-19.test: SRFI date/time library: string->date respects local DST if no time zone is read
> ERROR: srfi-4.test: u8 vectors: u8vector? success - arguments: ((memory-allocation-error "list->u8vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: u8 vectors: u8vector? failure - arguments: ((memory-allocation-error "list->s8vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: u8 vectors: u8vector-length success 1 - arguments: ((memory-allocation-error "list->u8vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: s8 vectors: s8vector? success - arguments: ((memory-allocation-error "list->s8vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: s8 vectors: s8vector? failure - arguments: ((memory-allocation-error "list->u8vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: s8 vectors: s8vector-length success 1 - arguments: ((memory-allocation-error "list->s8vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: u16 vectors: u16vector? success - arguments: ((memory-allocation-error "list->u16vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: u16 vectors: u16vector? failure - arguments: ((memory-allocation-error "list->s16vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: u16 vectors: u16vector-length success 1 - arguments: ((memory-allocation-error "list->u16vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: s16 vectors: s16vector? success - arguments: ((memory-allocation-error "list->s16vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: s16 vectors: s16vector? failure - arguments: ((memory-allocation-error "list->u16vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: s16 vectors: s16vector-length success 1 - arguments: ((memory-allocation-error "list->s16vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: u32 vectors: u32vector? success - arguments: ((memory-allocation-error "list->u32vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: u32 vectors: u32vector? failure - arguments: ((memory-allocation-error "list->s32vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: u32 vectors: u32vector-length success 1 - arguments: ((memory-allocation-error "list->u32vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: s32 vectors: s32vector? success - arguments: ((memory-allocation-error "list->s32vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: s32 vectors: s32vector? failure - arguments: ((memory-allocation-error "list->u32vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: s32 vectors: s32vector-length success 1 - arguments: ((memory-allocation-error "list->s32vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: u64 vectors: u64vector? success - arguments: ((memory-allocation-error "list->u64vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: u64 vectors: u64vector? failure - arguments: ((memory-allocation-error "list->s64vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: u64 vectors: u64vector-length success 1 - arguments: ((memory-allocation-error "list->u64vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: s64 vectors: s64vector? success - arguments: ((memory-allocation-error "list->s64vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: s64 vectors: s64vector? failure - arguments: ((memory-allocation-error "list->u64vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: s64 vectors: s64vector-length success 1 - arguments: ((memory-allocation-error "list->s64vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: f32 vectors: f32vector? success - arguments: ((memory-allocation-error "list->f32vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: f32 vectors: f32vector? failure - arguments: ((memory-allocation-error "list->s8vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: f32 vectors: f32vector-length success 1 - arguments: ((memory-allocation-error "list->f32vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: f64 vectors: f64vector? success - arguments: ((memory-allocation-error "list->f64vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: f64 vectors: f64vector? failure - arguments: ((memory-allocation-error "list->f32vector" "Memory allocation error" #f #f))
> ERROR: srfi-4.test: f64 vectors: f64vector-length success 1 - arguments: ((memory-allocation-error "list->f64vector" "Memory allocation error" #f #f))
> FAIL: time.test: strftime %Z doesn't return garbage
>
> Totals for this test run:
> passes:                 2079
> failures:               7
> unexpected passes:      0
> expected failures:      17
> unresolved test cases:  0
> untested test cases:    0
> unsupported test cases: 9
> errors:                 30

David C Sterratt later sez:
> In libguile/scmconfig.h I see:
>
> /* Define if the system has the type `uintptr_t'. */
> /* #undef HAVE_UINTPTR_T */
>
> I can't find any references to SIZEOF_UINTPTR_T, UINTPTR_MAX,
> INTPTR_MAX and INTPTR_MIN

ttn sez:
> looks like two main problem areas: time and uniform vectors.

[ttn 2002/03/25 15:55:06] sez:
> for guile-1.6, if HAVE_UINTPTR_T is not defined then `unsigned long' is used
> to implement SCM in libguile/tags.h.  libguile/__scm.h has this comment:
> 
>  * Guile as of today can only work on systems which fulfill at least the
>  * following requirements:
>  * - long ints have at least 32 bits.
>  *   Guile's type system is based on this assumption.
>  * - long ints consist of at least four characters.
>  *   It is assumed that cells, i. e. pairs of long ints, are eight character
>  *   aligned, because three bits of a cell pointer are used for type data.
>  * - sizeof (void*) == sizeof (long int)
>  *   Pointers are stored in SCM objects, and sometimes SCM objects are passed
>  *   as void*.  Thus, there has to be a one-to-one correspondence.
>  * - numbers are encoded using two's complement.
>  *   The implementation of the bitwise scheme level operations is based on
>  *   this assumption.
>  * - ... add more
> 
> perhaps these requirements can be codified into some test for configure.
> i don't know how things have changed for HEAD branch.
