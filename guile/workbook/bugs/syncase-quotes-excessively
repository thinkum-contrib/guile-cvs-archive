summary: syncase quotes hashes and empty applications
reported: Lynn Winebarger <owinebar@free-expression.org>, 2002-03-30
reported: Eric E Moore <e.e.moore@sheffield.ac.uk>, 2002-04-23
affects: HEAD branch_release-1-6 branch_release-1-4
fixed: Mikael Djurfeldt <djurfeldt@nada.kth.se>, 2003-04-20, HEAD branch_release-1-6

From Lynn:

(use-modules (ice-9 syncase))
(define-syntax define-ez-class
  (syntax-rules ()
    ((_ name (parent ...) (slot ...) rest ...)
     (define-class name (parent ...) 
                                     (slot #:accessor slot #:init-keyword slot) ... 
                                     rest ...))))

seems straightforward enough, but syntax-rules quotes the parent list
and the #: keywords.

From Eric:

I was trying to write a simple syncase macro to simplify creating some
classes with goops, but there's some confusing quoting going on.

The simplest example of the sort of thing is:

(use-modules (ice-9 syncase)
             (oop goops))

(define-syntax my-define-class
  (syntax-rules ()
    ((my-define-class name supers slot ...)
     (define-class name supers slot ...))))

(my-define-class <someclass> () (someslot #:accessor someslot))

Which gives the error:

Backtrace:
In current input:
   8: 0* (my-define-class <someclass> () (someslot #:accessor someslot))
   8: 1  (define-class <someclass> (quote ()) (someslot (quote #:accessor) someslot))
   ...
   ?: 2  (define <someclass> (class (quote ()) (someslot (quote #) someslot) ...))
   ?: 3* (class (quote ()) (someslot (quote #:accessor) someslot) ...)

<unnamed port>: In expression (class (quote ()) (someslot # someslot) ...):
<unnamed port>: malformed slot option list
ABORT: (goops-error)

Changing the macro to:

(define-syntax my-define-class
  (syntax-rules ()
    ((my-define-class name supers slot ...)
     (quote (define-class name supers slot ...)))))

Does have:

(my-define-class <someclass> () (someslot #:accessor someslot))

returning:

(define-class <someclass> () (someslot #:accessor someslot))

Which even evals to do the right thing...
