Re-adding copy-on-write substrings and mutation-sharing substrings to Guile
---------------------------------------------------------------------------

Procedures:

  - substring STR [START [END]]

  Create a new string from STR, including characters from START
  (inclusive) to END (exclusive).  As long as neither STR nor the new
  string are modified (with string-set!, for example), the two strings
  might share storage.  That is, the substring is 'copy-on-write'.

  When you want to disallow this initial sharing, use string-copy.

  - string-copy STR [START [END]]

  Like substring above, but do not share storage initially.

  - substring/shared STR [START [END]]

  Return a 'mutation-sharing' substring.  Modifications to this string
  show up in STR, and vice versa.


Right now, the string datatype of Guile is very simple: it is a vector
of bytes, and each byte is interpreted as one character in the locale
text encoding, which is assumed to be a a single-byte encoding.

In the past, Guile also had mutation-sharing substrings.  These were
strings that shared storage with other strings and mutating any one
string would be reflected in all others.

Right now, ordinary substrings are created by allocating new storage
and copying the relevant bytes over.  Mutation-sharing substrings can
be used to avoid this operation (which will improve the time
complexity of algorithms), but one might not want to expose the
original strings to unintended, indirect mutations.

For this, having copy-on-write substrings is nice.  When created, they
share storage with the original string, but as soon as one of the
strings is modified, a new copy is made so that the rest remains
unaffected.

Cow-substrings can lead to memory ineffiencies: assume we are taking a
10 character substring from a 1000 character string and then drop the
1000 character string.  The 10 char string still shares storage with
the orginal string, but 990 bytes are unneeded.

We can try to avoid this situation by copying sort substrings when
they are created and/or doing additional house keeping during GC.
Users can also use string-copy

(Mutation-sharing substrings can cause the same inefficienies, ...)

Implementation:

There will be stringbufs and strings.  stringbufs hold the storage and
strings point into the middle of them.  Initially, only uniform-width
encodings are used and all offsets into stringbufs are in characters.

There is a global mutex that protects the fields of stringbufs and
strings.  I don't think there is a way around this mutex.

stringbuf: pointer to chars
           refcount

string: stringbuf
	start
	end
        shared

;; Low-level

(define (make-stringbuf length)
  (make <stringbuf> 
        :length length 
        :chars (malloc length) 
        :refcount 1))

(define (make-string length)
  (make <string>
        :stringbuf (make-stringbuf length) 
        :start 0
        :end length
        :shared #f))

(define (make-substring str start end shared)
  (lock-string-mutex
    (let ((buf (string-stringbuf str)))
      (inc! (stringbuf-refcount buf))
      (make <string>
            :stringbuf buf
            :start start
            :end end
            :shared shared))))

(define (make-unique! str)
  ;; mutex must be locked
  (cond
    ((> (stringbuf-refcount (string-stringbuf str)) 1)
     (let ((buf (make-stringbuf (- (string-end str) (string-start str)))))
       (memcpy (stringbuf-chars buf)
               (+ (stringbuf-chars (string->stringbuf str)) (string-start str))
	       (- (string-end str) (string-start str)))
       (dec! (stringbuf-refcount (string-stringbuf str)))
       (set! (string-stringbuf str) buf)
       (set! (string-end str) (- (string-end str) (string-start str)))
       (set! (string-start str) 0)))))

;; GC

(define (collect-stringbuf buf)
  (free (stringbuf-chars buf)))

(define (collect-string str)
  ;; XXX (string-stringbuf str) might be invalid
  (dec! (stringbuf-string str)))

;; Exported

(define (substring str start end)
  (make-substring str start end #f))

(define (string-copy str start end)
  (let ((str (substring str start end)))
    (lock-string-mutex
      (make-unique! str)
      str)))

(define (substring/shared str start end)
  (make-substring str start end #t))

;; General access patterns

(define (read-string-chars str proc)
  (lock-string-mutex
    (proc (+ (stringbuf-chars (string-stringbuf str)) (string-start str))
          (- (string-end str) (string-start str)))))

(define (read/write-string-chars str proc)
  (lock-string-mutex
    (if (not (string-shared str))
      (make-unique! str))
    (proc (+ (stringbuf-chars (string-stringbuf str)) (string-start str))
          (- (string-end str) (string-start str)))))

;; concrete accessors

(define (string-length str)
  (read-string-chars str
                      (lambda (chars length)
		        length)))

(define (string-ref str pos)
  (read-string-chars str 
                     (lambda (chars length)
                       (if (>= pos length)
                           (out-of-range))
                       (memref (+ chars pos)))))

(define (string-set! str pos char)
  (read/write-string-chars str 
                           (lambda (chars length)
                             (if (>= pos length)
                               (out-of-range))
                             (memset! (+ chars pos) char))))
