[ Author: mvo@zagadka.de; Status: very preliminary. ]

ISSUES:

 - Should declarations be on variables or on bindings?  Putting them
   on bindings is way more flexible and allows things like read-only
   import and things like no-inline. (Bindings are copied on import so
   they can get additional declarations in the importing module.)

 - Adding to declarations.  There is likely no simply rule what kind
   of declarations can safely be added when importing a binding.

 - Definitions inside top-level conditionals.  Should we allow things like

     (if ...
       (define ...))

   where the define is on the top-level, but not always executed?  I
   think this relatively easy to do and people seem to use it.


0. Introduction
---------------

This is a proposal for a model of how Guile executes code.  It is
meant to formalize things enough so that a compiler writer will know
what he/she must deal with.  Also, since the existence of a
ahead-of-time compiler can not really be hidden, the model should tell
the users of Guile what kind of behavior they need to expect.

The overall goal of the model is to make the behavior of code that is
compiled ahead-of-time very similar to code that is executed from
source, but at the same time allow an ahead-of-time compiler to
perform significant optimizations.

Also, it should be reasonably well specified in what environment macro
expansion takes place and how the module system interacts with
differences between compile-time environments and run-time
environments.

The output of the compiler is not specified.  Also, execution of
languages other than Scheme is not considered.  It is assumed that
additional languages are first translated to Scheme (or whatever
variant of Scheme we offer) and then compiled normally.

The compiler is contrained to produce object code that behaves as if
the things described below were done.  The goal is of course to have
it take lots of shortcuts that are possible because of the defined
semantics.

This text addresses only a small part of the whole system.  It does
not cover macro expansion in great detail, nor is it a module system
proposal.

1. The big picture
------------------

The basic unit of evaluation is a top-level form.  You can either
enter them at the repl or load them from a file.  In the following, a
"form" is always a top-level forms unless stated otherwise.

Evaluation of a source form with 'primitive-eval' consists of
compilation followed immediately by execution of the result.

Loading a source file with 'primitive-load' consists of reading a
form and evaluating it immediately; repeating this until the file
ends.

Compiling a source file consists of reading its forms and compiling
them without executing.  The result of the compilation is saved in the
'object' file.  When the object file is loaded, the compiled forms are
executed one after the other.

Note that the module system has not yet entered the definitions.

The remaining things to define are compilation of a form, and
execution of a compiled form.  The rest follows from them.


2. Compilation and Execution of Forms
-------------------------------------

Compiling a form and executing the result can happen in two separate
environments.  The former is called the compile-time environment, the
latter is the run-time environment.  When compilation is followed
immediately by execution, the two environments are identical (well
almost, the compiliation can change the environment) but when a file
is compiled and later loaded, the environment could have changed
completely.

It is therefore important to define what things the compiler is
allowed to infer from the compilation environment and can expect to be
true in the run-time environment as well.

The compiler performs macro expansion before actually compiling a
form.  All Scheme forms are actually macros that expand into a small
number of fixed constructs that are handled by the compiler.  These
'assembly level' constructs are not detailed here, but a few that are
needed for this text are mentioned.  They generally look like

  (:KEYWORD ARGS...)

For example, the form

  (if #t 1 2)

would be expanded (via the normal macro mechanism) to

  (:if #t 1 2)

and the compiler would recognize the ":if" keyword.

The compiler needs to look up the identifiers of the code that it
compiles.  Non-toplevel identifiers are handled in the 'obvious'
manner.  Identifiers that are bound at the top-level are looked up in
a module that is specified by a name.  The name '#t' denotes the
module that is current at the time the lookup is performed.  Other
names denote specific modules.

User code and code produced by macro expansions can specify that an
identifier should be explicitely looked up in a given module by using
the compiler-directive

  (:module-ref NAME SYMBOL)

An unadorned identifier SYMBOL that is not locally bound is equivalent
to

  (:module-ref #t SYMBOL)

When there is no module registered under the given name, an error is
signalled.

When no binding can be found for the identifier, it is assumed to
refer to a variable without any declarations.

Some attributes of whatever is found when an identifier is looked up
are expected to carry over to the run-time environment.  Whether this
is indeed the case should be checked when the compiled form is
executed and a warning should be emitted when a violation is found, or
an error when there is no way to continue.

The things that are expected to stay fixed are:

 - whether the identifier is bound to a macro transformer or not.
   (The exact value of the macro transformer is allowed to vary, but
   what was a macro at compile time should be a macro at run-time and
   vice versa.)

 - when the identifier is bound to a variable, the declarations that
   are associated with the variable.  More precisely, only the
   declarations that are actually used by the compiler are expected to
   stay fixed, but the compiler is allowed to use any declaration.
   (This can be used to flag things like 'car', '+', etc which would
   then be inlined by the compiler.  This allows us to explicitely
   flag the 'usual integrations' and people could still provide their
   own version of 'car'.)

When an identifier refers to a macro, that macro is expanded using the
macro transformer, of course.  When an identifier refers to a variable
and the variable has no declarations that allow the compiler to do
otherwise, it emits code that looks up the variable in the specified
module and then accesses that variable.  (The module is either the
'current module' when the name is '#t' or the module that has the
given name in the run-time environment.)

The lookup of variables during compilation or execution does not need
to follow changes to the naming of modules closely.

However, execution of a form might change the current module and thus
might affect the lookup of variables in the following subform.  The
compiler is not required to emit code that respects this.  Also,
execution of a form might register a new module or change the names of
existing modules.  The emitted code is not required to follow this
precisely, as well.

There are ways to constrain the compiler to do the right thing,
however.  The lookup of a variable is done in two steps: first, the
module object must be found that belongs to the given module name, and
second, the variable name is looked up in the set of bindings of the
module object.  For each top-level form, the module objects that
belong to the given names are fixed when the top-level form is
executed.  The module objects become part of the environment of that
form and are thus inherited by closures.

In other, more detailed words: execution of a form (top-level or not)
happens in a environment.  Closures remember the environment that they
are constructed in.  Every environment can be visualized as a chain of
frames; invoking a closure adds a frame to the remembered environment
of the closure.  The last frame in the chain of frames is a 'top-level
frame', the others are 'inner frames'.  A inner frame holds local
variables and is not discussed here.  A top-level frame holds a table
of module objects that are used to lookup the (top-level) variables
used in the code of the closure.  Executing a top-level form then
consists of constructing the top-level frame and the actual execution
of the code which might include references to the top-level frame for
variable lookups.  Executing a :module-ref instruction consists of
looking up the given identifier in the indicated module object, which
is retrieved from the top-level frame.  (Conceptually, this lookup is
performed on every variable access, but it can be 'memoized' or
performed ahead-of-time, of course.)

The compiler is free to reuse top-level frames for several top-level
forms, even when executing a form will change the name/module mapping
used in the next.  You must explicitely tell the compiler that it must
construct a new top-level frame.  You can do this with the

  (:module-barrier)                       XXX - need better name

compiler directive.  The directive guarantees that code prior to it is
fully executed before top-level frames for forms after it are
constructed.  The directive must be a top-level form.

Variable lookups are not guaranteed to succeed.  An error message must
be delayed until the variable is actually used.


3. The Module System
--------------------

Until now, much has been said about looking up variables, but nothing
about what variables are and how they get organized into modules.

A variable is a small run-time data structure that has operations for
'reading' it, 'writing' it and retrieving its 'declarations'.  The
declarations of a variable are constant over its life-time.  See above
for how the compiler might use them.

A variable does not have a name on its own.  Variables are associated
with names via 'modules'.

A module contains a set of bindings, and a binding is a pair
consisting of a symbol and another object.  The other object in a
binding can be a macro transformer or a variable.

When a module is created, the set of bindings is empty.  You can add
bindings to the set, but you can not remove them.  Existing bindings
can not be changed.  There can be at most one binding with a given
symbol.

During compilation of a file that defines a module, that module is
partially constructed (via code executed by eval-case).  The
constructed module is made the current module, but it is not
registered in the system.  Requests for a module with the name of the
module-being-compiled will not find the partially constructed module.
When the compiler wants to follow a :module-ref statement with an
explicit name, it must check whether that name refers to the partially
constructed current module.

The definition of variables is done with the instruction

  (:define-variable ID INIT DECLS)

When this is executed, a new variable binding is added to the current
module (determined as explained above for lookups) or an existing
binding is reused, or an error is signalled.  What exactly happens is
determined by the module system, which is only constrained as
explained above.  The compiler will generate a call to a suitable
function, which might be able to 'mass define' from a table, maybe.

The compiler can assume that either a variable binding with ID and
DECLS now exists in the current module, or an error has been
signalled.  (It might not assume that _no_ binding exists when it
hasn't seen a :define-variable, tho.)

Importing happens without explicit involvement of the compiler.
Importing will affect the partially constructed module, and the
compiler can find the imported bindings there.

This implies that compiling a import statement such as 'use-modules'
will load the requested module at compile time.


4. The Missing Pieces
---------------------

From the above description, it might not be clear how the usual module
system operations like 'define-module', 'use-modules', etc actually
work in this model.

They use 'eval-case' to execute code that influences the compiler.

A normal definition like

  (define (baz) ...)

would expand into

  (:define-variable baz (lambda () ...) ())


The unhygienic macro definition

  (define-macro (foo)
    `(bar))

could expand into

  (eval-case
    ((compile-toplevel load-toplevel)
     (module-define-macro (current-module) 'foo (lambda (exp) `(bar)))))

where 'module-define-macro' is a regular procedure, unknown to the
compiler, that will add a new macro-transformer binding to the given
module (or throw an error).  The compiler will evaluate the code in
the current module and also generate code to execute it when the form
is loaded.  (The eval-case would expand further into a :eval-case
statement that the compiler understands.  Also, with a hygienic macro
system the 'module-define-macro' name would be qualified with its
originating module name, like (:module-ref (guile) module-define-macro).)


A module definition

  (define-module (mod) ...)

would expand into

  (eval-case
    ((compile-top-level)
     (process-define-module-for-compiler (mod) ...))
    ((load-toplevel)
     (process-define-module (mod) ...)
     (:module-barrier)))

The function process-define-module-for-compiler would create a new
module according to the parameters in the 'define-module' statement
and would make it current.  It would not register the new module, or
use an existing module.  Just as module-define-macro, the function is
unknown to the compiler.  The compiler would just call it during
compilation.

The function process-define-module would first check whether a module
exists with the given name, and reuse it if one is found.  It would
then check whether the new parameters are consistent with the module.
When no module is found, it will create a new one and register it with
the system.

As explained above, the :module-barrier requires the compiler to obey
the new current module.  It is placed in the load-toplevel branch
since it is a declaration about the executed code.

Similarily to define-module, this

  (use-modules (mod))

expands into

  (eval-case
    ((compile-top-level)
     (process-use-modules (mod)))
    ((load-toplevel)
     (process-use-modules (mod))
     (:module-barrier)))

The behavior of the module system is therefore quite decoupled from
the compiler.  Only the :module-barriers must be placed correctly and
the rule that no binding can be changed once it has been added must be
followed.  (It is allowed to remove a whole module and rebuild it from
scratch, tho.  Also, we might allow modules that can change their set
of bindings freely, but a user can not assume that the compiler will
respect that.)
