This is a version of the hobbit compiler for Guile.

What is hobbit ?
================
Hobbit is a Scheme to C compiler, originally written for SCM by  
Tanel Tammet (tammet@cs.chalmers.se). It compiles all R4RS (with the
exception of mutual tail recursion and hygienic macros) and some
SCM specific stuff. Defmacros are supported.

Last release of hobbit is 4d, and it is GPLed.
The original compiler is in file hobbit.scm, and the original
documentation is in hobbit.doc. The file scmhob.h is included by the C
generated code, and defines implementation specific macros.


What is in this package ?
=========================
As Guile is close in design to SCM, it was tempting to use hobbit as
the Guile compiler. This appeared very easy to do, and the modified 
compiler is given in file guile-hobbit.scm. The new
#include file is now called guilehob.scm. 

I have also given a shell-script (hob) to be used as a line command
compiler. Notice in this shell-script the redefinition of defmacro, this is
CRUCIAL for compiling them !!!

In ice-9, there is an example of the hobbit use to compile
boot-9.scm, and so speed up significantly Guile's starting time.
The version of boot-9.scm used is based on the snapshot dated 15 July
1997. It works also with guile-1.2. 


Requirements for installation
=============================
1) You need a guile version 1.2, but later release until now should work also.
2) You need also SLIB installed and accessible from guile. I use SLIB2a6,
other versions should be ok also.
In file .guile is an example of how to access SLIB and
declare hobbit as a SLIB package.


Requirements for out-of-the-box installation
=================================================
The two platform where I tested hobbit are HP-UX 10.20 and
Linux-Elf. They provide dynamic linking, which is the most convenient,
as no edition and recompilation of guile.c or other wrappers is required.
The distribution assumes you have one of these systems. 

If not, but you have dynamic linking, a simple edition of the Makefile
(or better, configure.in) will be sufficient. Ah, yes, there is
libtool now, but I have had no time to look at that for the moment,
sorry.

If you do not have dynamic linking,
a manual intervention will be necessary to include a call to the only
symbol (in the form scm_init_*) exported by the compiled file.

For HP-UX 10.20, I used the HP Ansi-C compiler instead of gcc-2.7.2.
This because of some problems with this last one. But this gcc was 
compiled under HP-UX 9.05, and perhaps this caused the trouble ?
Feel free to try out gcc on HP, and mail me success or disaster.
With the HP Ansi-C compiler and optimization on, you may be short of
memory on the example.


Installation
============
./configure --with-guile=(the prefix used to install guile)
make install

And now, if you want to test out the example:
cd ice-9
make verif

Tha above command lists the differences between stock boot-9.scm and the
one used in compiling.
make
SCHEME_LOAD_PATH=`pwd`/.. guile

This last one will work only if you have dynamic linking.
If you are satisfied with the result:
make install


Remarks, limitations
====================
I have used this version of hobbit on some medium size programs
(several hundred lines), occasionnaly split in pieces to avoid too big
compilation times and to hunt bugs. Results were really satisfactory,
from correctness and speed points of view. Nevertheless, as
error catching is near from inexistant in hobbit, only code thoroughly
tested interactively should be compiled. 

Notice also that file guilehob.scm is still incomplete. Hence the call
to nm when building the shared library, to look at undefined references.

in the subdirectory ice-9, doing 'make verif' will give you the diffs
from the boot-9.scm I have compiled and the one used as a starting
point. It is worth to study. In particular, it shows the importance of
a good defmacro definition, and the inability of hobbit to deal simply
with a variable number of arguments to external functions.

There is a known bug: you may generate wrong code if you compile
something like:
(define (azerty x)
    (let ((one (lambda (y) (+ y 1)))
          (two (lambda (y) y)))
      ((if (odd? x) one two) y)))
It happens actually in premacros.c (look at the warning when
compiling).


Problem report, suggestions, etc...
===================================
Mail to Bernard.URBAN@meteo.fr

