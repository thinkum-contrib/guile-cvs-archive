dnl Process this file with autoconf to produce a configure script.
AC_INIT(guile-tcl.c)
AM_INIT_AUTOMAKE(guile-tcltk, 2.0, no-define)
AM_MAINTAINER_MODE

#--------------------------------------------------------------------
#
# User options
#
#--------------------------------------------------------------------

AC_ARG_WITH(tcltk,
[  --with-tcltk=DIR        Use DIR/include and DIR/lib for tk and tcl])

AC_ARG_WITH(tkdir,
[  --with-tkdir=TKDIR      Use DIR/include and DIR/lib for tcl and
			  TKDIR/include and TKDIR/lib for tk where
			  DIR is specified with --with-tcltk])

AC_ARG_WITH(tcl,
changequote(<, >)dnl
<  --with-tcl=LIBNAME      Name of tcl library to use [LIBNAME=tcl7.5]>,
changequote([, ])dnl
)

AC_ARG_WITH(tk,
changequote(<, >)dnl
<  --with-tk=LIBNAME       Name of tk library to use [LIBNAME=tk4.1]>,
changequote([, ])dnl
)

#--------------------------------------------------------------------

AC_PROG_CC
AC_PROG_CPP
AM_PROG_LIBTOOL

if test -z "$with_tcltk" || test "$with_tcltk" = yes; then
### Some compilers don't check /usr/local/include and /usr/local/lib
### by default.  However, that's where Tcl and Tk are usually installed.
test "$GCC" = yes || {
  test -d /usr/local/include && TCLTK_INCLUDE="-I/usr/local/include"
  test -d /usr/local/lib     && TCLTK_LIBDIR="-L/usr/local/lib"
}
else
  TCLTK_INCLUDE="-I$with_tcltk/include"
  TCLTK_LIBDIR="-L$with_tcltk/lib"
fi

if test -n "$with_tkdir"; then
  TK_INCLUDE="-I$with_tkdir/include"
  TK_LIBDIR="-L$with_tkdir/lib"
fi

dnl Checks for libraries.
CFLAGS="$TCLTK_INCLUDE $TK_INCLUDE $TCLTK_LIBDIR $TK_LIBDIR $CFLAGS"

AC_PATH_XTRA
CFLAGS="$CFLAGS $X_CFLAGS"
LIBS="$LIBS $X_LIBS"
AC_CHECK_LIB(X11, main)

AC_CHECK_LIB(m, main)

### On some systems, the Tcl library contains references to functions from:
### - the dynamic linker library, -ldl
### - the socket library, -lsocket
### - the network socket layer(?) library, -lnsl
### So we need to check for those.
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_LIB(socket, main)
AC_CHECK_LIB(nsl, main)

AC_HAVE_HEADERS(unistd.h)

### Make sure Guile is installed.
(build-guile link) >/dev/null 2>&1 || {
    echo -n "the Guile library doesn't seem to be installed; this package " >&2
    echo "requires it" >&2
    exit 2
}

if test -n "$with_tcl"; then
  TCLNAME=$with_tcl
  AC_CHECK_LIB($TCLNAME, Tcl_CreateInterp)
else
  TCLNAME=tcl7.6
  AC_CHECK_LIB($TCLNAME, Tcl_CreateInterp, ,
  [TCLNAME=tcl7.5
   AC_CHECK_LIB($TCLNAME, Tcl_CreateInterp)])
fi

if test -n "$with_tk"; then
  TKNAME=$with_tk
  AC_CHECK_LIB($TKNAME, Tk_Init)
else
  TKNAME=tk4.2
  AC_CHECK_LIB($TKNAME, Tk_Init, ,
  [TKNAME=tk4.1
   AC_CHECK_LIB($TKNAME, Tk_Init)])
fi

### Use gtcltk-lib only if we seem to have Tcl and Tk installed on the
### system.
case "$LIBS" in
  *"-l${TCLNAME}"*"-l${TKNAME}"* ) ;;
  *"-l${TKNAME}"*"-l${TCLNAME}"* ) ;;
  * )
    echo "Tcl or Tk doesn't seem to be installed; this package requires it" >&2
    exit 2
  ;;
esac

AC_TRY_COMPILE([#include "tcl.h"],[Tcl_File x;],,[
  echo "Tcl/Tk seems to be of a too old or too new version."
  echo "Please use 7.6/4.2 or 7.5/4.1"
  exit 2
])

### Add the Guile libraries to the link command.
LIBS="$LIBS `build-guile link`"

case "$LIBS" in
  *-lqthreads* )
    LIBOBJS="tclUnixNotfy.o $LIBOBJS"
    ## If we're creating a shared library (using libtool!), then we'll
    ## need to generate a list of .lo files corresponding to the .o files
    ## given in LIBOBJS.  We'll call it LIBLOBJS.
    LIBLOBJS="`echo ${LIBOBJS} | sed 's/\.o/.lo/g'`"
  ;;
esac
AC_SUBST(LIBLOBJS)

TCLTKDIR="`build-guile info pkgdatadir`/tcltk"
AC_SUBST(TCLTKDIR)

dnl Checks for library functions.
AC_SUBST(TCL_EXTRA_LIBS)

AC_OUTPUT(Makefile)
