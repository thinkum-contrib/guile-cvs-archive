(scsh alt-syntax)
;; not compatible with (ice-9 syncase)
(define-syntax syntax-rules)

(scsh receive)
;; compatible with (ice-9 receive), which is not available in Guile 1.4
(receive)

(scsh module-system)
;; dummy definitions.
(define-structure structure-ref)

(scsh let-opt)
;; not compatible with (ice-9 optargs).
(let-optionals let-optionals* :optional)

(scsh loophole)
;; dummy definition.
(loophole)

(scsh signals)
(syntax-error)

(scsh syntax-helpers)
(transcribe-process-form)

(scsh bitwise)
(arithmetic-shift bitwise-not bitwise-and bitwise-ior bitwise-xor)

(scsh utilities)
;; "delete" is incompatile with guile primitive.  it's also incompatible with
;; delete from (scsh lib list-lib).
(del delete filter first first? nth fold fold-right any every mapv mapv! vector-every? copy-vector initialize-vector vector-append vfold vfold-right check-arg conjoin disjoin negate compose call/cc deprecated-proc deposit-bit-field real->exact-integer)

(scsh define-foreign-syntax)
;; dummy definitions.
(foreign-source define-foreign)

(scsh ascii)
(ascii->char char->ascii)

(scsh features)
(immutable? make-immutable!)

(scsh primitives)
(unspecific)

(scsh reading)
(reading-error)

(scsh jar-defrecord)
(define-record-type define-accessor define-accessors)

(scsh char-set)
(char:newline char:tab char:page char:return char:space char:vtab char-ascii? char-set? char-set-copy char-set= char-set<= char-set-size char-set-adjoin char-set-delete char-set-adjoin! char-set-delete! char-set-for-each char-set-fold reduce-char-set char-set chars->char-set string->char-set ascii-range->char-set predicate->char-set ->char-set char-set-members char-set-contains? char-set-every? char-set-any char-set-invert char-set-union char-set-intersection char-set-difference char-set-invert! char-set-union! char-set-intersection! char-set-difference! char-set:lower-case char-set:upper-case char-set:alphabetic char-set:numeric char-set:alphanumeric char-set:graphic char-set:printing char-set:whitespace char-set:blank char-set:control char-set:punctuation char-set:hex-digit char-set:ascii char-set:empty char-set:full char-lower-case? char-upper-case? char-alphabetic? char-numeric? char-alphanumeric? char-graphic? char-printing? char-whitespace? char-blank? char-control? char-punctuation? char-hex-digit? char-ascii? char-set:s)

(scsh defrec)
(define-record-discloser define-record)

(scsh lib string-lib)
(string-map string-map! string-fold string-unfold string-fold-right string-unfold-right string-tabulate string-for-each string-iter string-every string-any string-compare string-compare-ci substring-compare substring-compare-ci string= string< string> string<= string>= string<> string-ci= string-ci< string-ci> string-ci<= string-ci>= string-ci<> substring= substring<> substring-ci= substring-ci<> substring< substring> substring-ci< substring-ci> substring<= substring>= substring-ci<= substring-ci>= string-upper-case? string-lower-case? capitalize-string capitalize-words string-downcase string-upcase capitalize-string! capitalize-words! string-downcase! string-upcase! string-take string-take-right string-drop string-drop-right string-pad string-pad-right string-trim string-trim-right string-trim-both string-filter string-delete string-index string-index-right string-skip string-skip-right string-prefix-count string-prefix-count-ci string-suffix-count string-suffix-count-ci substring-prefix-count substring-prefix-count-ci substring-suffix-count substring-suffix-count-ci string-prefix? string-prefix-ci? string-suffix? string-suffix-ci? substring-prefix? substring-prefix-ci? substring-suffix? substring-suffix-ci? substring? substring-ci? string-fill! string-copy! string-copy string-reverse string-reverse! reverse-list->string string->list string-concat string-concat/shared string-append/shared xsubstring string-xcopy! join-strings make-kmp-restart-vector parse-final-start+end parse-start+end check-substring-spec)

(scsh errno)
;; defines symbols such as errno/perm.
()

(scsh rw)
(bogus-substring-spec? read-string!/partial read-string/partial read-string! read-string write-string write-string/partial)

(scsh rx re-low)
(match:start match:end match:substring new-cre cre-search cre-search? cre:string cre:tvec)

(scsh rx cond-package)
(define-simple-syntax when unless ? switchq switch prog0 land* %switch %switchq)

(scsh rx let-match)
(let-match if-match match-cond)

(scsh rx re)
;; redefines regexp?
(%make-re-dsm %make-re-dsm/posix re-dsm? re-dsm:body re-dsm:pre-dsm re-dsm:tsm re-dsm:posix set-re-dsm:posix re-dsm:post-dsm re-dsm open-dsm %make-re-seq %make-re-seq/posix re-seq? re-seq:elts re-seq:tsm re-seq:posix set-re-seq:posix make-re-seq re-seq %make-re-choice %make-re-choice/posix re-choice? re-choice:elts re-choice:tsm re-choice:posix set-re-choice:posix make-re-choice re-choice %make-re-repeat %make-re-repeat/posix re-repeat? re-repeat:from re-repeat:to re-repeat:body re-repeat:tsm re-repeat:posix set-re-repeat:posix make-re-repeat re-repeat reduce-repeat %make-re-submatch %make-re-submatch/posix re-submatch? re-submatch:body re-submatch:pre-dsm re-submatch:tsm re-submatch:posix set-re-submatch:posix re-submatch:post-dsm make-re-submatch re-submatch re-string:chars re-string:posix set-re-string:posix re-string re-string? make-re-string make-re-string/posix re-trivial re-trivial? re-char-set:cset re-char-set:posix set-re-char-set:posix re-char-set? re-char-set make-re-char-set make-re-char-set/posix re-empty re-empty? re-bos make-re-bos re-bos? re-eos make-re-eos re-eos? re-bol make-re-bol re-bol? re-eol make-re-eol re-eol? re-bow make-re-bow re-bow? re-eow make-re-eow re-eow? re-any re-any? re-nonl regexp? re-tsm re-word flush-submatches map/changed uncase uncase-char-set uncase-string char-set-full? char-set-empty? static-char-class?)

(scsh rx spencer)
(posix-string->regexp)

(scsh rx simp)
(simplify-regexp)

(scsh rx posixstr)
(regexp->posix-string)

(scsh rx re-high)
(compile-regexp regexp-search regexp-search?)

(scsh rx oldfuns)
(->regexp)

(scsh rx re-subst)
(regexp-substitute)

(scsh rx re-fold)
(regexp-fold regexp-fold-right regexp-for-each)

(scsh rx re-syntax)
(sre-form? expand-rx if-sre-form rx)

(scsh rx parse)
(static-regexp? sre->regexp parse-sre parse-sres regexp->scheme char-set->in-pair)

(scsh rx rx-lib)
(coerce-dynamic-regexp spec->char-set)

(scsh rdelim)
;; replaces guile procs: read-line, read-delimited, read-delimited!
(read-line read-paragraph read-delimited read-delimited! skip-char-set)

(scsh here)
()

(scsh scsh-version)
(scsh-major-version scsh-minor-version scsh-version-string)

(scsh weak)
(make-weak-pointer weak-pointer-ref weak-pointer?)

(scsh population)
(make-population add-to-population! population-reduce population->list walk-population)

(scsh sighandlers)
;; also exports signal/alrm, interrupt/alrm etc.
(signal->interrupt with-enabled-interrupts enabled-interrupts set-enabled-interrupts set-interrupt-handler interrupt-handler)

(scsh procobj)
(proc:pid proc? pid->proc autoreap-policy reap-zombies new-child-proc wait/poll wait/stopped-children wait wait-any wait-process-group)

(scsh syscalls)
;; replaces pipe, sleep
(%exec %%fork cwd user-gid user-effective-gid set-gid user-supplementary-gids user-uid user-effective-uid set-uid user-login-name pid parent-pid set-process-group become-session-leader set-umask process-times cpu-ticks/sec set-file-mode set-file-owner set-file-group read-symlink delete-directory set-file-times file-info file-info:type file-info:gid file-info:inode file-info:atime file-info:mtime file-info:ctime file-info:mode file-info:nlinks file-info:uid file-info:size sync-file sync-file-system seek/set seek/delta seek/end tell pipe signal-process signal-process-group pause-until-interrupt user-info user-info:name user-info:uid user-info:gid user-info:home-dir user-info:shell name->user-info uid->user-info ->uid ->username %homedir group-info group-info:name group-info:gid group-info:members ->gid ->groupname directory-files env->alist alist->env fdes-flags set-fdes-flags fdes-status set-fdes-status open/read open/write open/read+write open/non-blocking open/append open/exclusive open/create open/truncate open/no-control-tty fdflags/close-on-exec sleep sleep-until system-name define-errno-syscall)

(scsh fname)
(file-name-as-directory file-name-directory? file-name-non-directory? directory-as-file-name ensure-file-name-is-nondirectory file-name-absolute? file-name-directory file-name-nondirectory split-file-name path-list->file-name file-name-extension file-name-sans-extension replace-extension parse-file-name expand-file-name simplify-file-name resolve-tilde-file-name resolve-file-name absolute-file-name home-dir home-file)

(scsh fluid)
(make-fluid set-fluid! fluid let-fluid)

(scsh stringcoll)
(make-string-collector collect-string! clear-string-collector! string-collector->string)

(scsh scsh-condition)
(errno-error with-errno-handler* with-errno-handler)

(scsh lib list-lib)
;; replaces:
;; map map-in-order for-each member assoc iota list-index
;; delete delete!
(xcons list-tabulate list-copy circular-list iota proper-list? circular-list? dotted-list? not-pair? null-list? list= first second third fourth fifth sixth seventh eighth ninth tenth car+cdr take drop take-right drop-right take! drop-right! take-while drop-while take-while! split-at split-at! span break span! break! last length+ append-reverse append-reverse! concatenate concatenate! zip unzip1 unzip2 unzip3 unzip4 unzip5 count unfold unfold-right fold unfold pair-fold reduce fold-right unfold-right pair-fold-right reduce-right append-map append-map! map! pair-for-each filter-map map-in-order filter partition remove filter! partition! remove! find find-tail any every list-index delete delete! delete-duplicates delete-duplicates! alist-cons alist-copy alist-delete alist-delete! lset<= lset= lset-adjoin lset-union lset-union! lset-intersection lset-intersection! lset-difference lset-difference! lset-xor lset-xor! lset-diff+intersection lset-diff+intersection! map for-each member assoc)
