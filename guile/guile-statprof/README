-*-text-*-

(For installation instructions and requirements, please see the
 INSTALL file.)

Summary:
--------

(ice-9 statprof) is intended to be a fairly simple statistical
profiler for guile.  It is in the early stages yet, so consider its
output still suspect, and please report any bugs to
guile-devel@gnu.org, or to me directly at rlb@defaultvalue.org.

A simple use of statprof would look like this:

  (debug-enable 'debug)
  (trap-enable 'traps)

  (statprof-reset 0 50000)
  (statprof-start)
  (do-something)
  (statprof-stop)
  (statprof-display)

This would reset statprof, clearing all accumulated statistics, then
start profiling, run some code, stop profiling, and finally display a
gprof flat-style table of statistics which will look something like
this:

  Running tests.
    %   cumulative                     total           
   time   seconds     calls  samples   s/call  name    
  100.00      0.25     2001       12     0.00  loop
   50.00      0.12     2000        6     0.00  do-nothing
   41.67      0.10     2000        5     0.00  simple-format
   ...

All of the numerical data with the exception of the calls column is
statistically approximate.  The first column is the percent time spent
inside the procedure, the second is the total time spent in the
procedure, the third is the total number of calls to the procedure, the
fourth is the number of times Guile was executing that procedure when
the profiling sampler fired, the fifth is the average seconds spent
per call, and the final column is the name of the procedure.

The profiler uses "eq?" and the procedure object itself to identify
the procedures, so it won't confuse different procedures with the same
name.  They will show up as two different rows in the output.

Right now the profiler is quite simplistic.  I cannot provide
call-graphs or other higher level information.  What you see in the
table is pretty much all there is.

The profiler works by setting the unix profiling signal ITIMER_PROF to
go off after the interval you define in the call to statprof-reset.
When the signal fires, a sampling routine is run which looks at the
current procedure that's executing, and then crawls up the stack, and
for each procedure encountered, increments that procedure's sample
count.  Note that if a procedure is encountered multiple times on a
given stack, it is only counted once.  After the sampling is complete,
the profiler resets profiling timer to fire again after the
appropriate interval.

Meanwhile, the profiler keeps track, via get-internal-run-time, how
much CPU time (system and user -- which is also what ITIMER_PROF
tracks), has elapsed while code has been executing within a
statprof-start/stop block.

The profiler also tries to avoid counting or timing its own code as
much as possible.


API Reference:
-------------

(statprof-active?)

  Return #t if the profiler is active (i.e. if statprof-start has been
  called more times than statprof-stop).

(statprof-start)
(statprof-stop)

  Start and stop the profiler respectively.  These calls can be
  nested, and whichever function has been called more often wins.

(statprof-reset interval-seconds interval-microseconds)

  Reset the profiler, clearing any accumulated statistics and setting
  the sampling interval as indicated by the arguments provided.

(statprof-accumulated-time)

  Return the time in seconds spent executing profiled code since the
  last time the profiler was reset.

(statprof-sample-count)

  Return the number of times the profiler has sampled the profiled
  code.

(statprof-fold-call-data proc init-value)

  Similar to hash-fold (see guile docs), but proc is called for each
  procedure that has been sampled or called since the last
  statprof-reset.  proc is called with the args (call-data
  prior-result).  prior-result has the same semantics as it does in
  hash-fold.  call-data contains the information describing the
  procedure's profiled statistics.

(statprof-proc-call-data proc)

  Return the call-data associated with proc, if any.

(statprof-call-data-name call-data)

  Return the name of the procedure (if any) associated with this call
  data.  If this data was collected for an anonymous function, there
  may be no name.

(statprof-call-data-calls call-data)

  Return the number of times the procedure represented by call-data
  has been called since the last statprof-reset.

(statprof-call-data-samples call-data)

  Return the number of times the procedure represented by call-data
  has been sampled since the last statprof-reset.

(statprof-call-data->stats call-data)

  Return a stats object created from call-data.  A stats object
  contains timing information computed from the sampling statistics,
  the total accumulated time, etc.

(statprof-stats-proc-name stats)

  Return the name of the procedure (if any) associated with stats.  If
  this data was collected for an anonymous function, there may be no
  name.

(statprof-stats-%-time-in-proc stats)

  Return a statistical estimate of the time spent in the procedure
  represented by stats as a percentage of the total accumulated
  profiling time.

(statprof-stats-secs-in-proc stats)

  Return a statistical estimate of the total number of seconds spent
  while profiling in the procedure represented by stats.

(statprof-stats-calls stats)

  Return the number of times the proc represented by stats
  has been called since the last statprof-reset.

(statprof-stats-secs-per-call stats)

  Return a statistical estimate of the number of seconds spent per
  call for the procedure represented by stats.

(statprof-stats-samples stats)

  Return the number of times the procedure represented by stats
  has been sampled since the last statprof-reset.

(statprof-display)

  Display the accumulated statistics for all the procedures called
  since the last statprof-reset.
