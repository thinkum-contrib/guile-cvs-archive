\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename goops.info
@settitle Goops Manual
@setchapternewpage odd
@paragraphindent 0
@c %**end of header

@set VERSION 0.1

@dircategory Scheme Programming
@direntry
* goops: (goops).          The GOOPS reference manual.
@end direntry

@macro goops                    @c was {\stklos}
GOOPS
@end macro

@macro guile                    @c was {\stk}
Guile
@end macro

@ifinfo
This file documents GOOPS, an object oriented extension for Guile.

Copyright (C) 1999 Free Software Foundation

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@end ifinfo

@c  This title page illustrates only one of the
@c  two methods of forming a title page.

@titlepage
@title Goops Manual
@subtitle For use with GOOPS @value{VERSION}
@author Christian Lynbech
@author @email{chl@@tbit.dk}
@author
@author Mikael Djurfeldt
@author @email{djurfeldt@@nada.kth.se}

@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1999 Free Software Foundation

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@end titlepage

@node Top, Introduction, (dir), (dir)

@menu
[When the manual is completed, this will be a flat index in the style of
 the Emacs manual.  More nodes will turn up under parts I-III.]

Part I: Preliminaries

* Introduction::
* Getting Started::

Part II: Reference Manual

* Reference Manual::

Part III: GOOPS Meta Object Protocol

* MOP specification::

The GOOPS tutorial

* Tutorial::

* Index::                       
* Concept Index::               
* Function and Variable Index::  
@end menu

@iftex
@chapter Preliminaries
@end iftex

@node Introduction, Getting Started, Top, Top
@section Introduction

@goops{} is the object oriented extention to @guile{}. Its
implementation is derived from @w{STk-3.99.3} by Erick Gallesio and
version 1.3 of the Gregor Kickzales @cite{Tiny-Clos}.  It is very close
to CLOS, the Common Lisp Object System (@cite{CLtL2}) but is adapted for
the Scheme language.

Briefly stated, the @goops{} extension gives the user a full object
oriented system with multiple inheritance and generic functions with
multi-method dispatch.  Furthermore, the whole implementation relies on
a true meta object protocol, in the spirit of the one defined for CLOS
(@cite{Gregor Kiczales: A Metaobject Protocol}).

@node Getting Started, Reference Manual, Introduction, Top
@section Getting Started

@menu
* Running GOOPS::

Examples of some basic GOOPS functionality.

* Methods::
* User-defined types::
* Asking for the type of an object::

See further in the GOOPS tutorial available in this distribution in
info (goops.info) and texinfo format.
@end menu

@node Running GOOPS, Methods, Getting Started, Getting Started
@subsection Running GOOPS
 
@enumerate
@item
Type

@smalllisp
guile-oops
@end smalllisp

You should now be at the Guile prompt ("guile> ").

@item
Type

@smalllisp
(use-modules (oop goops))
@end smalllisp

to load GOOPS.  (If your system supports dynamic loading, you
should be able to do this not only from `guile-oops' but from an
arbitrary Guile interpreter.)
@end enumerate

We're now ready to try some basic GOOPS functionality.

@node Methods, User-defined types, Running GOOPS, Getting Started
@subsection Methods

@smalllisp
@group
(define-method + ((x <string>) (y <string>))
  (string-append x y))

(+ 1 2) --> 3
(+ "abc" "de") --> "abcde"
@end group
@end smalllisp

@node User-defined types, Asking for the type of an object, Methods, Getting Started
@subsection User-defined types

@smalllisp
(define-class <2D-vector> ()
  (x #:init-value 0 #:accessor x-component #:init-keyword #:x)
  (y #:init-value 0 #:accessor y-component #:init-keyword #:y))

@group
(use-modules (ice-9 format))

(define-method write-object ((obj <2D-vector>) port)
  (display (format #f "<~S, ~S>" (x-component obj) (y-component obj))
           port))

(define v (make <2D-vector> #:x 3 #:y 4))

v --> <3, 4>
@end group

@group
(define-method + ((x <2D-vector>) (y <2D-vector>))
  (make <2D-vector>
        #:x (+ (x-component x) (x-component y))
        #:y (+ (y-component x) (y-component y))))

(+ v v) --> <6, 8>
@end group
@end smalllisp

@node Asking for the type of an object, , User-defined types, Getting Started
@subsection Types

@example
(class-of v) --> #<<class> <2D-vector> 40241ac0>
<2D-vector>  --> #<<class> <2D-vector> 40241ac0>
(class-of 1) --> #<<class> <integer> 401b2a98>
<integer>    --> #<<class> <integer> 401b2a98>

(is-a? v <2D-vector>) --> #t
@end example


@node Reference Manual, MOP specification, Getting Started, Top
@chapter Reference Manual
[TO BE WRITTEN]

@node MOP specification, Tutorial, Reference Manual, Top
@chapter MOP specification
[TO BE WRITTEN]

@node Tutorial, Index, MOP specification, Top
@chapter Tutorial
@include goops-tutorial.texi

@node Index, Concept Index, Tutorial, Top
@chapter Index
@page
@node     Concept Index, Function and Variable Index, Index, Top
@unnumberedsec Concept Index

@printindex cp

@node Function and Variable Index,  , Concept Index, Top
@unnumberedsec Function and Variable Index

@printindex fn

@summarycontents
@contents
@bye
