1998-12-04  Christian Lynbech  <chl@tbit.dk>

	* goops.h: Added missing prototypes for a nunch of functions.
	Added #include <guile/gh.h>.

	* goops.c (sort_applicable_methods): Initialize `vector' to the
	empty list.
	(scm_sys_prep_layout_x): Removed local variale `layout'.

1998-12-01  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* goops.c (apply_generic_0, apply_generic_1, apply_generic_2,
	apply_generic_3): Pass SCM_BOOL_F instead of SCM_UNDEFINED as
	next-method argument.  Otherwise scm_apply will get the wrong
	impression of number of arguments.

1998-11-27  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* Makefile.am (subpkgdata_DATA): Added goops/describe.scm.
	Renamed libgoops --> libgoopscore.

	* goops/goops.scm: Use module (goops goopscore).
	(initialize <class>): %inherit-magic! before initializing layout
	slot.
	(initialize <generic>): Let instances of subclasses of <generic>
	use apply-generic.

	* goops.c (CLASSP): Use the metaclass flag to determine if the
	object is a class.  This is faster than looking in the supers
	slot.
	(scm_prep_layout_x): Make procedure slots opaque.
	(scm_basic_make_class): Prep layout *after* inheriting magic, so
	that we can use the flags for information;
	Set the SCM_OBJF_GOOPS flag here.  scm_sys_inherit_magic_x uses it
	for argument checking.
	(scm_class_of): Don't presume that all structs are Goops objects!
	(scm_sys_allocate_instance): Major rewrite of the class/object
	flag logic.
	(scm_make): Use scm_set_object_procedure_x to set the procedures.
	(scm_init_goops): Use a new scheme for loading bindings into the
	same module (goops goops) as the scheme code: We pretend that we
	are the module (goops goopscore) but switch to (goops goops) when
	creating bindings.  (The old scheme had big problems since the
	current module system isn't designed for having both scheme and
	object code in the same module.)

	* goops.h, goops.c: Renamed SCM_OBJF_GENERIC -->
	SCM_OBJF_PURE_GENERIC.
	(SCM_OBJ_FLAGS, SCM_SET_OBJ_FLAGS): New macros.
	(scm_init_goops_goopscore_module): Renamed from
	scm_init_goops_goops_module.

	* guile-oops.c (inner_main): Call scm_init_goops_goopscore_module.

	* goops.h (SCM_INST_TYPE): Use SCM_OBJ_FLAGS.
	(scm_si_print): New slot index.

	* goops/describe.scm: New file.

	* TODO: New file.

1998-11-26  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* goops.c (scm_sys_inherit_magic_x): Return SCM_UNSPECIFIED.

	* goops.c, goops.h: Position of procedure slots moved in class
	objects.

1998-11-25  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* goops/goops.scm: Moved STk compatibility code to
	goops/compat.scm.

	* goops/compat.scm: New file.

	* Makefile.am (subpkgdata_DATA): Added goops/compat.scm.

	* goops.c (Operator_class): New metaclass: This is the class of
	operator classes.  While an entity class keeps its procedure in
	the object itself, an operator class keeps it in the class object.
	(scm_basic_make_class): Set operator class flag for operator
	classes.
	(scm_sys_allocate_instance): Set entity and operator class flags
	for entities (check superclasses too!) and operators.
	(make_standard_classes): Initialize Operator_class.

	* goops/goops.scm (*unbound*, make-unbound, unbound?): Replaced by
	primitives.
	(compute-get-n-set): Use an ordinary scheme variable for slots
	with class and each-subclass allocation.

	* goops.c (SCM_GOOPS_UNBOUND, SCM_GOOPS_UNBOUNDP): New macros:
	Implements an unbound value internal to goops.  We can't use
	SCM_UNDEFINED since that value can't be handled by scheme code;
	Replaced SCM_UNDEFINED --> SCM_UNBOUNDP and SCM_UNBNDP -->
	SCM_GOOPS_UNBOUNDP on suitable places.
	(scm_goops_the_unbound_value): Holds the unbound value.
	(Later we may choose to implement this as an ISYM or for
	efficiency.)
	(scm_init_goops): Initialize the unbound value.
	(scm_make_unbound, scm_unbound_p): New primitives.

1998-11-24  Mikael Djurfeldt  <mdj@mdj.nada.kth.se>

	* goops/goops.scm: Added <complex> to list of print slot
	initializations.
	(compute-getters-n-setters): Use `(procedure-property <proc> 'arity)'
	instead of `%procedure-arity' in `verify-accessors'.

	* goops.c (scm_class_of): Use TEST_CHANGE_CLASS to check for class
	redefinition if argument is a goops instance.

	* goops/goops.scm (ensure-class): Handle supers passed as
	meta-objects.

	* goops.c (set_slot_value_if_unbound): Apply init closure to an
	empty list, not a list containing an empty list.

	* Makefile.am (install-exec-hook): Do test -r instead of test -e
	in order to be backward compatible.

1998-11-24  Mikael Djurfeldt  <mdj@barbara.nada.kth.se>

	* Makefile.am (install-exec-hook): Don't exit with an error if we
	haven't created libgoops.so.0

1998-11-23  Mikael Djurfeldt  <mdj@barbara.nada.kth.se>

	* goops/goops.scm: Removed module workaround; Added :use-module on
	the module itself to load object code (which was what the
	workaround did);  Export public primitives defined by the object
	code.

	* goops.h: Added declaration of scm_init_goops_goops_module.

	* goops.c: Use new C level module interface <libguile/modules.h>
	to define and get bindings in the correct module.  (Now the full
	MOP should work!)

	* guile-oops.c: Call scm_init_goops_goops_module instead of
	scm_init_goops in order to postpone module creation until
	requested.
	
	* configure.in: Use aggressive warning messages if CC=gcc.

1998-11-22  Mikael Djurfeldt  <mdj@barbara.nada.kth.se>

	* goops.c: Added #include <libguile/modules.h>
	(scm_init_goops): Use the new C interface to modules.

1998-11-22  Mikael Djurfeldt  <mdj@kenneth>

	* Makefile.am (install-exec-hook): Added: Puts symbolic links to
	the dynamically linked library into the goops module directory.

	* configure.in: Removed unneccesary lines; Added AC_PROG_LN_S.

	* goops/goops.scm: Added workaround so that compiled code and
	interpreted code can coexist in the same module.

1998-11-22  Mikael Djurfeldt  <mdj@barbara.nada.kth.se>

	* goops.h, goops.c: New files.  Port of stklos from STk-3.99.3

	* goops: New directory: Contains the scheme part of stklos.
	
