dnl Process this file with autoconf to produce configure.
AC_INIT(goops.c)
. $srcdir/GOOPS-VERSION
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)
AM_MAINTAINER_MODE

AC_ARG_ENABLE(fdi-example,
  [  --enable-fdi-example      Include example definitions in fdi.c],,
  enable_fdi_example=no)
if test "$enable_fdi_example" = y || test "$enable_fdi_example" = yes; then
  AC_DEFINE(GOOPS_INCLUDE_FDI_EXAMPLE)
  LIBOBJS="fdi.o $LIBOBJS"
fi

GUILE_FLAGS
if test "`guile -c '(display (string>=? (version) "1.3.2"))'`" != "#t"; then
  AC_MSG_ERROR([Your Guile is too old.  You need guile-core-1.3.2 or later.])
fi

AC_PROG_CC
AC_PROG_LN_S
AM_PROG_LIBTOOL

CFLAGS="$CFLAGS $GUILE_CFLAGS"
LIBS="$LIBS $GUILE_LDFLAGS"

AC_CHECK_FUNCS(scm_apply_generic)

## If we're using GCC, ask for aggressive warnings.
case "$GCC" in
  yes)
    ## We had -Wstrict-prototypes in here for a bit, but Guile does too
    ## much stuff with generic function pointers for that to really be
    ## less than exasperating.
    CFLAGS="$CFLAGS -Wall -Wpointer-arith -Wmissing-prototypes" ;;
esac

AC_SUBST(GOOPS_MAJOR_VERSION)
AC_SUBST(GOOPS_MINOR_VERSION)
AC_SUBST(GOOPS_VERSION)

## If we're creating a shared library (using libtool!), then we'll
## need to generate a list of .lo files corresponding to the .o files
## given in LIBOBJS.  We'll call it LIBLOBJS.
LIBLOBJS="`echo ${LIBOBJS} | sed 's/\.o/.lo/g'`"

AC_SUBST(LIBLOBJS)

AC_OUTPUT(Makefile versiondat.h)

dnl Local Variables:
dnl comment-start: "dnl "
dnl comment-end: ""
dnl comment-start-skip: "\\bdnl\\b\\s *"
dnl End:
